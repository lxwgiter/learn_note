1、什么是代理设计模式？
    使用一个代理将对象包装起来, 然后用该代理对象取代原始对象。任何对原始对象的调用都要通过代理。
    代理对象决定是否以及何时将方法调用转到原始对象上。
2、代理模式的基本实现方式：      ----->用图像表示接口、被代理类、代理类三者之间的关系，
    ①首先代理类和被代理类要实现同一套接口，这样代理类中才会有被代理类的同名方法
    ②被代理类对象当作代理类对象的私有属性出现。
    ③某方法要求的参数是两者都实现的接口，通过多态的方式传入代理类对象。
    ④调用代理类对象中和被代理类对象的同名方法，在该方法中真实访问被代理类对象的方法。
3、静态代理及其局限性：
    静态代理，特征是代理类和目标对象的类都是在编译期间确定下来。
    不利于程序的扩展。同时，每一个代理类只能为一个接口服务，这样一来程序开发中必然产生过多的代理。
    最好可以通过一个代理类完成全部的代理功能
4、动态代理及其优点：
    动态代理是指客户通过代理类来调用其它对象的方法，并且是在程序运行时根据需要动态创建目标类的代理对象。
    动态代理使用场合:
        调试
        远程方法调用
     动态代理相比于静态代理的优点：
      不用像静态代理一样，每个被代理类都需要设计出相应的代理类，造成代码的冗余。
5、Java动态代理相关API
     Proxy ：专门完成代理的操作类，是所有动态代理类的父类。通过此类为一
    个或多个接口动态地生成实现类。
     提供用于创建动态代理类和动态代理对象的静态方法
        static Class<?> getProxyClass(ClassLoader loader, Class<?>... interfaces)
        创建一个动态代理类所对应的Class对象
        static Object newProxyInstance(ClassLoader loader, Class<?>[] interfaces,InvocationHandler h)
        直接创建一个动态代理对象
6、AOP（面向切面编程）
    概念：可以动态的替换某一段代码。使用到了动态代理。




























