1、Stream API说明：
    Java8中有两大最为重要的改变。第一个是 Lambda  表达式；另外一个则是 Stream API。
     Stream API ( java.util.stream) 把真正的函数式编程风格引入到Java中。这是目前为止对Java类库最好的补充。
     Stream 是 Java8 中处理集合的关键抽象概念，它可以指定你希望对集合进行的操作，可以执行非常复杂的查找、
    过滤和映射数据等操作。 使用Stream API 对集合数据进行操作，就类似于使用 SQL 执行的数据库查询。

2、为什么要使用Stream API？
     实际开发中，项目中多数数据源都来自于Mysql，Oracle等。但现在数据源可以更多了，有MongDB，Radis等，
    而这些NoSQL的数据就需要Java层面去处理。Streatm API就像是Java层面的SQL。
3、Stream 和 Collection 集合的区别：
     Collection 是一种静态的内存数据结构，而 Stream 是有关计算的。前者是主要面向内存，
      存储在内存中，后者主要是面向 CPU，通过 CPU 实现计算。-“集合讲的是数据，Stream讲的是运算“
4、Stream的理解：
    ①Stream 自己不会存储元素。
    ②Stream 不会改变源对象。相反，他们会返回一个持有结果的新Stream。
    ③Stream 操作是延迟执行的。这意味着他们会等到需要结果的时候才执行。
5、Stream的使用流程：
     1- 创建Stream
    一个数据源（如：集合、数组），获取一个流
     2- 中间操作
    一个中间操作链，对数据源的数据进行处理
     3- 终止操作( 终端操作)
    一旦执行终止操作，就执行中间操作链，并产生结果。之后，不会再被使用

    注：以上说明解释了”Stream操作是延迟执行的“，因为只有开始终止操作，中间操作才会被执行，
    同时，Stream对象不能被反复利用！Stream支持泛型编程。

6、Stream对象的创建
    方式一：通过集合
        Java8 中的 Collection 接口被扩展，提供了两个获取流的方法：
         default Stream<E> stream() :  返回一个顺序流
         default Stream<E> parallelStream() :   返回一个并行流
    方式二：通过数组
        Java8 中的 Arrays 的静态方法 stream() 可以获取数组流：
         static <T> Stream<T> stream(T[] array): 
    方式三：通过Stream的of方法
        可以调用Stream类静态方法 of(), 通过显示值创建一个流。它可以接收任意数量的参数。
         public static<T> Stream<T> of(T... values) :  返回一个流
    方法四：创建无限流
        可以使用静态方法 Stream.iterate() 和 Stream.generate()创建无限流。
         迭代
        public static<T> Stream<T> iterate(final T seed, final UnaryOperator<T> f)
         生成
        public static<T> Stream<T> generate(Supplier<T> s)

7、Stream的中间操作：
    多个中间操作可以连接起来形成一个 流水线，除非流水线上触发终止操作，否则 中间操作不会执行任何的处理！
    而在终止操作时一次性全部处理，称为“惰性求值”
    ①筛选与切片
        方法                                  描述
        filter(Predicate p)                 接收 Lambda，从流中排除某些元素
        distinct()                          筛选，通过流所生成元素的 hashCode() 和 equals() 去除重复元素
        limit(long maxSize)                 截断流，使其元素不超过给定数量
        skip(long n)                        跳过元素，返回一个扔掉了前 n 个元素的流。若流中元素不足 n 个，则返回一个空流。与 limit(n) 互补

    ②映射
        方法                                  描述
        map(Function f)                     接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素。
        mapToDouble(ToDoubleFunction f)     接收一个函数作为参数，该函数会被应用到每个元素上，产生一个新的 DoubleStream。
        mapToInt(ToIntFunction f)           接收一个函数作为参数，该函数会被应用到每个元素上，产生一个新的 IntStream。
        mapToLong(ToLongFunction f)         接收一个函数作为参数，该函数会被应用到每个元素上，产生一个新的 LongStream。
        flatMap(Function f)                 接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流

    ③排序
        方法                                  描述
        sorted()                            产生一个新流，其中按自然顺序排序
        sorted(Comparator com)              产生一个新流，其中按比较器顺序排序

8、终止操作：
     终端操作会从流的流水线生成结果。其结果可以是任何不是流的值，例如：List、Integer，甚至是 void 。
     流进行了终止操作后，不能再次使用。
    ①匹配与查找
        方法                                  描述
        allMatch(Predicate p)               检查是否匹配所有元素
        anyMatch(Predicate p)               检查是否至少匹配一个元素
        noneMatch(Predicate p)              检查是否没有匹配所有元素
        findFirst()                         返回第一个元素
        findAny()                           返回当前流中的任意元素
        count()                             返回流中元素总数
        max(Comparator c)                   返回流中最大值
        min(Comparator c)                   返回流中最小值
        forEach(Consumer c)                 内部迭代

    ②归约
        方法                                         描述
        reduce(T iden, BinaryOperator b)            可以将流中元素反复结合起来，得到一个值。返回 T
        reduce(BinaryOperator b)                    可以将流中元素反复结合起来，得到一个值。返回 Optional<T>

    ③收集
        方法                                 描述
        collect(Collector c)                将流转换为其他形式。接收一个 Collector接口的实现，用于给Stream中元素做汇总的方法
        Collector 接口中方法的实现决定了如何对流执行收集的操作(如收集到 List、Set、Map)。
        另外， Collectors 实用类提供了很多静态方法，可以方便地创建常见收集器实例。比较常用的如下：
          toList List<T> 把流中元素收集到List
            List<Employee> emps= list.stream().collect(Collectors.toList());
          toSet Set<T> 把流中元素收集到Set
            Set<Employee> emps= list.stream().collect(Collectors.toSet());
          toCollection Collection<T> 把流中元素收集到创建的集合
            Collection<Employee> emps =list.stream().collect(Collectors.toCollection(ArrayList::new));

9、Optional类
     为了解决空指针异常，Google公司著名的Guava项目引入了Optional类，Guava通过使用检查空值的方式来防止代码污染，它鼓励程序员写更干净的代
    码。受到Google Guava的启发，Optional类已经成为Java 8类库的一部分
     Optional<T> 类(java.util.Optional) 是一个容器类，它可以保存类型T的值，代表这个值存在。或者仅仅保存null，表示这个值不存在。
    原来用 null 表示一个值不存在，现在 Optional 可以更好的表达这个概念。并且可以避免空指针异常。
     主要作用：Optional提供很多有用的方法，这样我们就不用显式进行空值检测。

    Optiinal类中的方法
      创建Optional 类对象的方法：
         Optional.of(T t) : 创建一个 Optional 实例，t必须非空；
         Optional.empty() : 创建一个空的 Optional 实例
         Optional.ofNullable(T t) ：t可以为null
      判断Optional 容器中是否包含对象：
         boolean isPresent() : 判断是否包含对象
         void ifPresent(Consumer<? super T> consumer)  ：如果有值，就执行Consumer接口的实现代码，并且该值会作为参数传给它。
      获取Optional 容器的对象：
         T get(): 如果调用对象包含值，返回该值，否则抛异常
         T orElse(T other)  ：如果有值则将其返回，否则返回指定的other对象。
         T orElseGet(Supplier<? extends T> other) ： ：如果有值则将其返回，否则返回由Supplier接口实现提供的对象。
         T orElseThrow(Supplier<? extends X> exceptionSupplier) 如果有值则将其返回，否则抛出由Supplier接口实现提供的异常。
















