Java集合框架：
一、体系：
    主要分为Collection接口和Map接口两种体系，另外包含Iterator接口，Collections工具类、Arrays工具类
    Comparable接口、Comparator接口。整套集合API在java.util包内
二、继承关系：
    ①Collection接口
        ---List接口
            ---Vector实现类
            ---ArrayList实现类
            ---LinkedList实现类
        ---Set接口
            ---HashSet实现类
                ---LinkedHashSet实现类
            ---TreeSet实现类
    ②Map接口
        ---Hashtable实现类
            ---Properties实现类
        ---HashMap实现类
            ---LinkedHashMap实现类
        ---TreeMap实现类
    说明：
    1、Iterator接口是Collection父接口，只可用于Collection接口，不可用于Map接口！
    2、实现类名称中带有"hash"的，需要存储的元素类同时重写hashCode方法和equals方法
    3、名称中带有"tree"的，需要存储的元素类借助Comparable接口或Comparator接口其中之一。

三、依次介绍：
    ①Collection接口：
       特点：由于以下方法需要，要求Collection接口体系，元素所在类都要重写equals方法(包括ArrayList和LinkedList)
        1、添加
             add(Object obj)
             addAll(Collection coll)
        2、获取有效元素的个数
             int size()
        3、清空集合
             void clear()
        4、是否是空集合
             boolean isEmpty()
        5、是否包含某个元素
             boolean contains(Object obj)：是通过元素的equals方法来判断是否是同一个对象
             boolean containsAll(Collection c)：也是调用元素的equals方法来比较的。拿两个集合的元素挨个比较。
        6、删除
             boolean remove(Object obj) ：通过元素的equals方法判断是否是要删除的那个元素。只会删除找到的第一个元素
             boolean removeAll(Collection coll)：取当前集合的差集
        7、取两个集合的交集
             boolean retainAll(Collection c)：把交集的结果存在当前集合中，不影响c
        8、集合是否相等
             boolean equals(Object obj)
        9、转成对象数组
             Object[] toArray()
        10、获取集合对象的哈希值
             hashCode()
        11、遍历
             iterator()：返回迭代器对象，用于集合遍历

    ②Iterator迭代器接口
         Iterator对象称为迭代器(设计模式的一种)，主要用于遍历 Collection 集合中的元素。
         Iterator是Collection的父接口
         集合对象每次调用iterator()方法都得到一个全新的迭代器对象，默认游标都在集合的第一个元素之前
         Iterator对象的三个方法：
            hasNext()
            next()
            remove()   删除当前迭代器指向的元素
         不能在迭代器执行遍历操作时，改变集合的结构，否则会报错。除非使用迭代器本身的remove方法

    ③List接口
        特点：元素有序、且可重复，集合中的每个元素都有其对应的顺序索引。支持索引！
         List除了从Collection集合继承的方法外，List 集合里添加了一些根据索引来操作集合元素的方法。
            void add(int index, Object ele): 在index 位置插入ele 元素
            boolean addAll(int index, Collection eles): 从index 位置开始将eles中 中的所有元素添加进来
            Object get(int index): 获取指定index 位置的元素
            int indexOf(Object obj): 返回obj 在集合中首次出现的位置
            int lastIndexOf(Object obj): 返回obj 在当前集合中末次出现的位置
            Object remove(int index): 移除指定index 位置的元素，并返回此元素
            Object set(int index, Object ele): 设置指定index 位置的元素为ele
            List subList(int fromIndex, int toIndex): 返回从fromIndex 到toIndex位置的子集合

    ④ArrayList实现类---->(List实现类之一)
         JDK1.7：ArrayList像饿汉式，直接创建一个初始容量为10的数组
         JDK1.8：ArrayList像懒汉式，一开始创建一个长度为0的数组，当添加第一个元素时再创建一个始容量为10的数组
                  当底层数组长度不够时，新建容量为1.5倍的新数组，并进行值拷贝。
         对于 频繁的插入或删除元素的操作，建议使用LinkedList类，效率较高
         ArrayList新增方法：
             void addFirst(Object obj)
             void addLast(Object obj)
             Object getFirst()
             Object getLast()
             Object removeFirst()
             Object removeLast()
         优点：适合做元素查找
         缺点：不适合做大量的增删操作
    ⑤LinkedList实现类---->(List实现类之二)
        存储结构：双向循环链表
         新增方法：
             void addFirst(Object obj)
             void addLast(Object obj)
             Object getFirst()
             Object getLast()
             Object removeFirst()
             Object removeLast()

    ⑥Vector实现类---->(List实现类之三)
        Vector 是一个古老的集合，JDK1.0就有了。大多数操作与ArrayList相同，区别之处在于Vector是线程安全的。(极少使用)
        JDK1.7及1.8都是默认数组初始长度为10，容量不够时，扩容为原来的两倍
        新增方法：
             void addElement(Object obj)
             void insertElementAt(Object obj,int index)
             void setElementAt(Object obj,int index)
             void removeElement(Object obj)
             void removeAllElements()

    ⑦Set接口
         Set接口是Collection的子接口，set接口没有提供额外的方法
         Set 集合不允许包含相同的元素，如果试把两个相同的元素加入同一个Set 集合中，则添加操作失败。
         Set接口具有不可重复性和无序性。对无序性不能理解为随机性。

    ⑧HashSet实现类---->(Set实现类之一)
        储存结构：数组+链表+红黑树
            对数组的理解：底层也是数组，初始容量为16，当如果使用率超过0.75，（16*0.75=12）就会扩大容量为原来的2倍。
            对链表的理解：当hashCode值相同、equals返回false时，在相应的数组索引处形成链式结构。
            对红黑树的理解：当链表的长度超过8时，链表树化，进一步提升性能。元素删除导致小于8后，重新链化(jdk1.8及之后)
        HashSet 按 Hash 算法来存储集合中的元素，因此具有很好的存取、查找、删除、性能。
        特点：
            不能保证元素的排列顺序
            HashSet 不是线程安全的
            集合元素可以是 null
        对于存放在Set容器中的对象， 对应的类一定要重写equals() 和hashCode(Object obj) 方法
        方法：未定义，使用的是自Collection接口继承的方法

    ⑨LinkedHashSet---->(Set实现类之二、HashSet子类)
        储存结构：双向循环链表+链表+红黑树
        它使用双向链表维护元素的次序，这使得元素看起来是以插入顺序保存的。
        LinkedHashSet插入性能略低于 HashSet，但在迭代访问 Set 里的全部元素时有很好的性能。
        对于存放在Set容器中的对象， 对应的类一定要重写equals() 和hashCode(Object obj) 方法
        方法：未定义，使用的是自Collection接口继承的方法

    ⑩TreeSet---->(Set实现类之三)
        TreeSet底层使用 红黑树结构存储数据
         新增的方法如下： (了解)
            Comparator comparator()
            Object first()
            Object last()
            Object lower(Object e)
            Object higher(Object e)
            SortedSet subSet(fromElement, toElement)
            SortedSet headSet(toElement)
            SortedSet tailSet(fromElement)
        TreeSet两种排序方法：自然排序和 定制排序。默认情况下，TreeSet 采用自然排序。
        由于自然排序和 定制排序也需要在TreeMap中实现，所以，在后面单独总结

    ⑪Map接口
     Map与Collection并列存在。用于保存具有 映射关系的数据:key-value
     Map 中的 key 和 value 都可以是任何引用类型的数据
     Map的实现类为HashMap和TreeMap，都不允许重复，重复添加的结果表现为：键相同，值覆盖
     常用方法：
          添加 、删除、修改操作 ：
             Object put(Object key,Object value)：将指定key-value添加到(或修改)当前map对象中
             void putAll(Map m):将m中的所有key-value对存放到当前map中
             Object remove(Object key)：移除指定key的key-value对，并返回value
             void clear()：清空当前map中的所有数据
          元素查询的操作：
             Object get(Object key)：获取指定key对应的value
             boolean containsKey(Object key)：是否包含指定的key
             boolean containsValue(Object value)：是否包含指定的value
             int size()：返回map中key-value对的个数
             boolean isEmpty()：判断当前map是否为空
             boolean equals(Object obj)：判断当前map和参数对象obj是否相等
          元视图操作的方法：
             Set keySet()：返回所有key构成的Set集合
             Collection values()：返回所有value构成的Collection集合
             Set entrySet()：返回所有key-value对构成的Set集合

    ⑫HashMap---->(Map实现类之一)
        存储结构：(参照HashSet)
            JDK 7及以前版本：HashMap是数组+链表结构(即为链地址法)
            JDK 8版本发布以后：HashMap是数组+链表+红黑树实现
        扩容方式：(参照HashSet)
            底层也是数组，初始容量为16，当如果使用率超过0.75，（16*0.75=12）就会扩大容量为原来的2倍。
            对红黑树的理解：当链表的长度超过8时，链表树化，进一步提升性能。元素删除导致小于8后，重新链化(jdk1.8及之后)
        HashMap是 Map 接口 使用频率最高的实现类。
        允许使用null键和null值，与HashSet一样，不保证映射的顺序。
        所有的key构成的集合是Set:无序的、不可重复的。所以，key所在的类要重写：equals()和hashCode()
        所有的value构成的集合是Collection:无序的、可以重复的。所以，value所在的类要重写：equals()
        一个key-value构成一个entry
        所有的entry构成的集合是Set:无序的、不可重复的
        HashMap判断两个key相等的标准是：两个key 通过equals() 方法返回 true，hashCode 值也相等。
        HashMap判断两个value相等的标准是：两个 value 通过 equals() 方法返回 true。
        方法：未定义，继承自Map接口的方法

    ⑬LinkedHashMap---->(Map实现类之二，HashMap子类)
        存储结构：(参照LinkedHashSet)
        与LinkedHashSet类似，LinkedHashMap 可以维护 Map 的迭代顺序：迭代顺序与 Key-Value 对的插入顺序一致

    ⑭TreeMap---->(Map实现类之三)
         存储结构：(参照TreeSet)
         键值对中的key所在类需要实现自然排序或者定制排序

    ⑮Hashtable---->(Map实现类之四)
        Hashtable是个古老的 Map 实现类，JDK1.0就提供了。不同于HashMap，Hashtable是线程安全的。
        Hashtable实现原理和HashMap相同，功能相同。底层都使用哈希表结构，查询速度快，很多情况下可以互用。
        与HashMap不同，Hashtable 不允许使用 null 作为 key 和 value

    ⑯Properties---->(Map实现类之五、Hashtable子类)
        Properties 类是 Hashtable 的子类，该对象用于处理属性文件
        由于属性文件里的 key、value 都是字符串类型，所以 Properties 里的 key和 value 都是字符串类型
        存取数据时，建议使用setProperty(String key,String value)方法和getProperty(String key)方法
        properties是集合唯一不支持泛型的类型。
        Properties常用于IO流操作，p=new Properties();  file=new File("路径");  p.load(file).


    ⑰Collections工具类
        Collections 是一个操作 Set、List 和 Map 等集合的工具类
        Collections 中提供了一系列静态的方法对集合元素进行排序、查询和修改等操作，还提供了对集合对象设置不可变、对集合对象实现同步控制等方法
         排序操作：为 （均为static 方法）
            reverse(List)：反转 List 中元素的顺序
            shuffle(List)：对 List 集合元素进行随机排序
            sort(List)：根据元素的自然顺序对指定 List 集合元素按升序排序
            sort(List，Comparator)：根据指定的 Comparator 产生的顺序对 List 集合元素进行排序
            swap(List，int， int)：将指定 list 集合中的 i 处元素和 j 处元素进行交换
         查找、替换操作：
            Object max(Collection)：根据元素的自然顺序，返回给定集合中的最大元素
            Object max(Collection，Comparator)：根据 Comparator 指定的顺序，返回给定集合中的最大元素
            Object min(Collection)
            Object min(Collection，Comparator)
            int frequency(Collection，Object)：返回指定集合中指定元素的出现次数
            void copy(List dest,List src)：将src中的内容复制到dest中
            boolean replaceAll(List list，Object oldVal，Object newVal)：使用新值替换List 对象的所有旧值
         同步控制
        Collections 类中提供了多个 synchronizedXxx() 方法，该方法可使将指定集
        合包装成线程同步的集合，从而可以解决多线程并发访问集合时的线程安全问题


    ⑱Arrays工具类
        ①Arrays.asList(数组对象)静态方法，要求参数必须是对象数组，不能是基本数据类型数组，比如：可以使Integer型数组，不可以是int型数组
        ②Arrays.sort(数组对象)  对数组进行排序，支持自然排序和定制排序
        ③Arrays.binarySearch(Object[] a,Object key)
        ④Arrays.fill(Object[] a,Object value) 将数组中所有值替换为value

集合的常用遍历方式：
    ①迭代器
    ②foreach
    ③普通的循环

请问ArrayList/LinkedList/Vector的异同？谈谈你的理解？ArrayList底层是什么？扩容机制？Vector和ArrayList的最大区别?
     ArrayList和LinkedList的异同
        二者都线程不安全，相对线程安全的Vector，执行效率高。
        此外，ArrayList是实现了基于动态数组的数据结构，LinkedList基于链表的数据结构。对于
        随机访问get和set，ArrayList觉得优于LinkedList，因为LinkedList要移动指针。对于新增
        和删除操作add(特指插入)和remove，LinkedList比较占优势，因为ArrayList要移动数据。
     ArrayList和Vector的区别
        Vector和ArrayList几乎是完全相同的,唯一的区别在于Vector是同步类(synchronized)，属于
        强同步类。因此开销就比ArrayList要大，访问要慢。正常情况下,大多数的Java程序员使用
        ArrayList而不是Vector,因为同步完全可以由程序员自己来控制。Vector每次扩容请求其大
        小的2倍空间，而ArrayList是1.5倍。Vector还有一个子类Stack。

Comparable和Comparator：
    两个接口负责了Java中的比较，其中Comparator为函数式接口。值得一提的是，只有被TreeSet和TreeMap实现时，
    比较结果为0会去重(TreeSet是不会添加，TreeMap是覆盖)，在排序中时，比较结果为0，指挥并列，不会去重。

自然排序和 定制排序：
    自然排序：
        使用默认构造器new TreeSet()或者new TreeMap()
        TreeSet会调用集合元素的 compareTo(Object obj) 方法来比较元素之间的大小关系，然后将集合元素按升序(默认情况)排列
        如果试图把一个对象添加到 TreeSet 时，则该对象的类必须实现 Comparable接口。
            实现Comparable的类必须实现compareTo(Object obj)方法，两个对象即通过compareTo(Object obj) 方法的返回值来比较大小。
        向TreeSet中添加元素时，只有第一个元素无须比较compareTo()方法，后面添加的所有元素都会调用compareTo()方法进行比较。
        向因为只有相同类的两个实例才会比较大小，所以向 TreeSet  中添加的应该是同一个类的

    定制排序：
        使用带参构造器new TreeSet(Comparator实现类对象)或者new TreeMap(Comparator实现类对象)
        通过Comparator接口来实现(不是元素所在类实现该接口)。需要重写compare(T o1,T o2)方法。
        利用int compare(T o1,T o2)方法，比较o1和o2的大小：如果方法返回正整数，则表示o1大于o2；如果返回0，表示相等；返回负整数，表示o1小于o2。
        此时，仍然只能向TreeSet中添加类型相同的对象。否则发生ClassCastException异常。

HashSet和HashMap的元素添加过程：
    HashSet：
         当向 HashSet 集合中存入一个元素时，HashSet 会调用该对象的 hashCode() 方法
        来得到该对象的 hashCode 值，然后根据 hashCode 值，通过某种散列函数决定该对象
        在 HashSet 底层数组中的存储位置。（这个散列函数会与底层数组的长度相计算得到在
        数组中的下标，并且这种散列函数计算还尽可能保证能均匀存储元素，越是散列分布，
        该散列函数设计的越好）
         如果两个元素的hashCode()值相等，会再继续调用equals方法，如果equals方法结果
        为true，添加失败；如果为false，那么会保存该元素，但是该数组的位置已经有元素了，
        那么会通过链表的方式继续链接。
    HashMap：
        向HashMap中添加entry1(key，value)，需要首先计算entry1中key的哈希值(根据
        key所在类的hashCode()计算得到)，此哈希值经过处理以后，得到在底层Entry[]数
        组中要存储的位置i。如果位置i上没有元素，则entry1直接添加成功。如果位置i上
        已经存在entry2(或还有链表存在的entry3，entry4)，则需要通过循环的方法，依次
        比较entry1中key和其他的entry。如果彼此hash值不同，则直接添加成功。如果
        hash值不同，继续比较二者是否equals。如果返回值为true，则使用entry1的value
        去替换equals为true的entry的value。如果遍历一遍以后，发现所有的equals返回都
        为false,则entry1仍可添加成功。entry1指向原有的entry元素。

JDK8新增遍历集合方式：
    集合对象.foreach(lambda表达式)
        ①对于单列数据，遍历方式如下：
            集合对象.foreach(ele->System.out.println(ele));
        ②对于双列数据，遍历方式如下：
            集合对象.foreach((key,value)->System.out.println(key+"="+value));

Map集合的两种特殊遍历方式：
    方式一：
            Set<String> keySet = hm.keySet();
            for (String key : keySet) {
                String value = hm.get(key);
                System.out.println(key+"\t"+value);
            }
    方式二：
            Set<Map.Entry<String, String>> entrySet = hm.entrySet();
    		for (Entry<String, String> entry : entrySet) {
    			String key = entry.getKey();
    			String value = entry.getValue();
    			System.out.println(key+"\t"+value);
    		}
    方式三：
        Map接口实现类不可使用迭代器进行遍历，但是通过keySet或者是entrySet方法得到的对象可以使用迭代器：
         Iterator<Map.Entry<Integer,Integer>> iter = map.entrySet().iterator();
                while(iter.hasNext()){
                    Map.Entry entry = iter.next();
                    System.out.println(entry.getKey()+"  :  "+entry.getValue());
                    iter.remove();
                }
                System.out.println();
                Iterator<Integer> keys = map.keySet().iterator();
                while(keys.hasNext()){
                    int k = keys.next();
                    System.out.println(k+" -- "+ map.get(k));
                }



