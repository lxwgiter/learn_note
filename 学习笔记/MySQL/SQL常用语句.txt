一、DDL
    1、创建数据库
        CREATE DATABASE 数据库名 
        CREATE DATABASE 数据库名 CHARACTER SET 字符集;
        CREATE DATABASE IF NOT EXISTS 数据库名;
        注意：DATABASE 不能改名
    2、操作数据库：
        查看当前所有的数据库：SHOW DATABASES; 
        查看当前正在使用的数据库：SELECT DATABASE();  #使用的一个 mysql 中的全局函数
        查看指定库下所有的表：SHOW TABLES FROM 数据库名;
        查看数据库的创建信息：SHOW CREATE DATABASE 数据库名;或者SHOW CREATE DATABASE 数据库名\G
        使用/切换数据库：USE 数据库名;
    3、修改数据库：
        更改数据库字符集：ALTER DATABASE 数据库名 CHARACTER SET 字符集;
        删除指定的数据库：DROP DATABASE IF EXISTS 数据库名;或者DROP DATABASE 数据库名;
    2、创建表：
        方式一：
            CREATE TABLE [IF NOT EXISTS] 表名(
                字段1 数据类型 [约束条件] [默认值],
                字段2 数据类型 [约束条件] [默认值],
                字段3 数据类型 [约束条件] [默认值],
                ……
                [表约束条件]
            );
        方式二：（AS不可省略）
            CREATE TABLE 新表 AS SELECT * FROM 现有表;
            CREATE TABLE 新表 AS SELECT * FROM 现有表 WHERE 1=2; -- 创建的新表是空表
    3、查看表结构：SHOW CREATE TABLE 表名\G
    4、修改表：
        使用 ALTER TABLE 语句可以实现：
            ①向已有的表中添加列：ALTER TABLE 表名 ADD  字段名 字段类型 【FIRST|AFTER 字段名】;
            ②修改现有表中的列：ALTER TABLE 表名 MODIFY  字段名 字段类型 【DEFAULT 默认值】【FIRST|AFTER 字段名】;
            ③重命名现有表中的列：ALTER TABLE 表名 CHANGE  列名 新列名 新数据类型;
            ④删除现有表中的列：ALTER TABLE 表名 DROP 字段名
        重命名表专用 RENAME TO 语句：
            方式一：RENAME TABLE 旧表名 TO 新表名;
            方式二：ALTER table 旧表名  RENAME [TO] 新表名;  -- [TO]可以省略
    5、删除表：
        注意点：到一张表和其他表不再关联时，才可删除。删除成功后，所有相关事务都被提交，DROP语句不可回滚
        DROP TABLE [IF EXISTS] 数据表1 [, 数据表2, …, 数据表n];
    6、清空表：
        TRUNCATE TABLE语句：删除表中所有的数据，释放表的存储空间，不可回滚
        TRUNCATE TABLE detail_dept;
        DELETE FROM语句：属于DML，可回滚
    7、删除数据库：
        DROP DATABASE 数据库名;
        DROP DATABASE  IF EXISTS  数据库名

二、DQL（也可叫DML）
    1、查询语句
    2、别名的查找方式
        SELECT last_name AS name, commission_pct comm   #省略 AS
        FROM  employees;
        或
        SELECT last_name "Name", salary*12 "Annual Salary"  #用双引号括起来
        FROM  employees;
    3、去除重复行查询，DISTINCT关键字：
        SELECT DISTINCT department_id
        FROM  employees;
        注意事项：
            ①DISTINCT 需要放到所有列名的前面，如果写成 SELECT salary, DISTINCT department_id FROM employees 会报错。
            ②DISTINCT 其实是对后面所有列名的组合进行去重，如果你想要看都有哪些不同的部门（department_id），只需
            要写 DISTINCT department_id 即可，后面不需要再加其他的列名了。
            ③组合去重：所有声明的字段都一样才可以去重
    4、常数查询：
        就是在 SELECT 查询结果中增加一列固定的常数列。这列的取值是我们指定的。
        使用情景：
            SELECT '尚硅谷' as "就职单位", last_name FROM employees;
    5、条件查询：
        SELECT 字段1,字段2
        FROM 表名
        WHERE 过滤条件
    6、排序查询：
        OEDER BY 关键字      ASC（ascend）: 升序      DESC（descend）:降序
        单列排序：
            SELECT  last_name, job_id, department_id, hire_date
            FROM   employees
            WHERE 过滤条件
            ORDER BY hire_date DESC ;
        多列排序(多级排序)：
            SELECT last_name, department_id, salary
            FROM  employees
            ORDER BY department_id, salary DESC;
            按照声明顺序进行多级排序。
        默认升序
    7、分页查询：
        语法：LIMIT 位置偏移量(从0开始), 每页的行数
        分页显式公式：（当前页数-1）*每页条数，每页条数
        注意：LIMIT 子句必须放在整个SELECT语句的最后！
    8、多表查询：
        多表查询分为：等值连接vs非等值连接、自连接vs非自连接、内连接vs外连接
        等值连接：
            SELECT last_name, department_name
            FROM employees, departments
            WHERE employees.department_id = departments.department_id;
            注意点：
            ①可以定义表的别名   ②尽量全部使用表名.字段名的格式优化查询
            ③可以进行3个表或者更多表的关联查询，过滤条件为n-1个，中间用and连接
        非等值连接：
            SELECT e.last_name,e.salary,j.grade_level
            FROM e,j
            WHERE e.`salary` BETWEEN j.`lowest_sal` AND j.`highest_sal`;
            ①e表的每一条数据都去与j表匹配，返回结果为1的合并。相当于做了笛卡尔积，等值连接也是如此
        自连接：一张表当做两张表操作，非自连接相反

        内连接：
            只返回可以做连接的数据，左表中未匹配的数据和右表中未匹配的数据不显示，以上都是SQL92内连接
            SQL99内连接语法： JOIN、INNER JOIN、CROSS JOIN 都表示内连接
        外连接：
            mysql只支持SQL99语法  ---》JOIN 表名 ON 连接条件
            ①左外连接:
                LEFT  OUTER  JOIN 表名  ON 连接条件
            ②右外连接
                RIGHT OUTER JOIN 表名 ON   连接条件
            ③满外连接--->mysql不支持SQL99中的FULL JOIN
                通过UNION有两种实现方式，通过UNION ALL有一种实现方式
            7种连接方式详见pdf

    9、子查询：
        分类方式：①单行子查询&多行子查询    ②相关子查询&非相关子查询
        单行子查询：
            使用单行操作符：“<、>、=、>=、<=、<>”
        多行子查询：
        -多行操作符：
            IN      等于列表中的任意一个
            ANY     需要和单行比较操作符一起使用，和子查询返回的某一个值比较
            ALL     需要和单行比较操作符一起使用，和子查询返回的所有值比较
            SOME    实际上是ANY的别名，作用相同，一般常使用ANY
        非相关子查询：以上都是
        相关子查询：
            如果子查询的执行依赖于外部查询，通常情况下都是因为子查询中的表用到了外部的表，并进行了条件
            关联，因此每执行一次外部查询，子查询都要重新计算一次，这样的子查询就称之为 关联子查询 。
        
        注：将子查询结果当作真正的表来使用时，比如直接写在FROM后、作为多表查询中的关联表等
        一定要给查询结果起别名才可以使用。



三、DML：
    注：增删改，由于约束的存在，也会出现执行失败的情况
    ①增：（由于存在非空约束等，会存在插入失败的情况）（VALUES等价于VALUE）
        所有字段按默认顺序插入数据：INSERT INTO 表名 VALUES (value1,value2,....);
        为表的指定字段插入数据：INSERT INTO 表名 (column1 [, column2, …, columnn]) VALUES (value1 [,value2, …, valuen]);
        同时插入多条记录：INSERT INTO 表名 VALUES (value1 [,value2, …, valuen]),(value1 [,value2, …, valuen]),……(value1 [,value2, …, valuen]);
        将查询结果添加：INSERT INTO 目标表名 (c1,c2,c3...) SELECT (c1,c2,c3..) FROM 源表名 [WHERE condition]
            -使用查询结果添加表数据时，不能使用AS，不用使用VALUES

    ②删：(由于存在主键外键约束，存在删除失败的情况)
        DELETE FROM语句：
            DELETE FROM table_name [WHERE <condition>];
    ③改:(由于各种约束，存在失败的情况)
        UPDATE SET语句：
            UPDATE 表名
            SET 字段名=值, 字段名=值, … , 字段名=值
            [WHERE condition]
四、DCL

四、其他
    1、Windows-DOS登录语句：
        mysql -h localhost -P 3306 -u root -p
        Enter password:****
    2、Windows-DOS退出语句：
        exit或者quit
    3、查询版本信息：
        select version()
    4、查看所有的数据库：
        show databases
    5、使用数据库：
        use 数据库名
    6、查看数据库下的表：
        show tables from 数据库名
    7、查看表的创建信息：
        show create table 表名称\G
    8、查看数据库的创建信息：
        show create database 数据库名\G
    9、查看MySQL的编码字符集：-->可到my.ini配置文件中进行修改，pdf02
        show variables like 'character_%';
        show variables like 'collation_%';
    10、别名关键字---as，可省略   别名可以使用双引号括起来，就可以包含空格等
    11、Windows-DOS数据库导入命令语句：
        source 文件盘符路径     如：mysql> source d:\mysqldb.sql
    11、空值参与运算：
        所有运算符或列值遇到null值，运算的结果都为null
    12、显示表结构
        DESCRIBE 表名;
        或
        DESC 表名;
    13、dual伪表查询：
        常用于测试，如：
        SELECT 12 % 3, 12 MOD 5 FROM dual;
    14、UNION及UNION ALL操作符
        作用：
            都是合并两个结果集，格式如下：
                SELECT column,... FROM table1
                UNION [ALL]
                SELECT column,... FROM table2
        ①UNION:返回两个结果集的并集，去除重复记录，开销大
        ②UNION ALL：返回并集，不去除重复记录
        注意：要求两个结果集的列必须一致

    15、ORDER BY在排序查询中表示排序，可以有多级排序
        在聚合函数的伪表查询中表示分组，可以有多级分组
    16、修改数据库字符集命令
        alter database 数据库名 character set 字符集;
    17、修改表的字符集
        alter table 表名  character set 字符集;
    18、查看存储引擎
        show engines;



五、非查询知识点：
    1、常用运算符：
        ①BETWEEN AND运算符，用于做区间限定
            SELECT D FROM TABLE WHERE C BETWEEN A AND B
        ②IN运算符
            IN运算符用于判断给定的值是否是IN列表中的一个值，如果是则返回1，否则返回0。如果给定的值为NULL，或者IN列表中存在NULL，则结果为NULL。
            IN运算符的应归属于where语句
        ③LIKE运算符，模糊查询
            LIKE运算符主要用来匹配字符串，通常用于模糊匹配，如果满足条件则返回1，否则返回0。如果给定的值或者匹配条件为NULL，则返回结果为NULL。
            LIKE运算符的应归属于where语句
        ④ REGEXP运算符
            REGEXP运算符用来匹配字符串，语法格式为： expr REGEXP 匹配条件 。
            REGEXP运算符的应归属于where语句
        更多移步pdf
    2、笛卡尔积错误：
        多表查询的时候不写连接条件或者连接条件无效，等同于使用CROSS JOIN关键字

    3、列的别名和表的别名
        ①列的别名： 用AS定义，无需要注意的事项
        ②表的别名：
            通常用于多表查询中，给不同表起别名简化，用AS定义，但是一但定义，在整个查询语句中必须全部使用别名
            归根结底在于查询语句的执行顺序，列的别名是定义在Selcet行，表的别名是定义在from行

    4、MySQL中不允许聚合函数的嵌套，oracle中是允许的：
    比如MIN(AVG(salary))在MySQL中不能书写，想要做到嵌套的效果需要给聚合函数的结果起别名，比如
        SELECT MIN(avg_sal)
        FROM (
        SELECT AVG(salary) avg_sal
        FROM employees
        GROUP BY department_id) temp
    5、EXISTS 与 NOT EXISTS关键字
        在子查询中使用，见子查询pdf



