一、Python基础
    基础语法：①不用加头文件    ②每行代码结尾不用加分号
    ③type()函数可以进行数据类型的判断，结果为<class '类型'>    返回值类型是Type类，不是string
      在print语句里自动转化为字符串输出，但是进行字符串拼接操作时需要使用str()进行类型转换
    ④input方法提供了输入的功能
1、Python六种数据类型
    ①数字(Number)
        整数(int)
        浮点数(float)
        复数(complex)
        布尔(bool)    True或False(首字母大写)  也可以用1或0表示
    ②字符串
        string      定义方式：单引号、双引号、三引号均可
    ③列表
        List  有序的可变序列
    ④元组
        Tuple  有序的不可变序列
    ⑤集合
        Set     无序不重复集合
    ⑥字典
        Dictionary  无序Key—Value集合

2、Python的注释
    ①单行注释
        #  一般“#”号后面加一个空格，这是Python书写的规范
    ②多行注释
        “”“ ”“”三对引号

3、Python的变量
    ①Python是弱类型语言，JS中需要用var声明变量
        而Python中定义变量时练var都省略了。
    ②Python中的输出语句是是print()函数，默认换行，不换行需要加上print("输出语句", end='')
    ③Python数据类型的转换：int()、str()、float()函数
        注意点：使用int()转换浮点数会直接截断,其他一致
    ④命名变量时不可使用关键字和保留字

4、Python运算符
    /           除：Python中的"/"和JS相同，运算的结果不会取整，而是正常的数学运算，保留小数
    //          取整除 和java中的/相同
    **          指数运算 如a**b
    /*          除法赋值运算
    **=         幂运算赋值运算符
    //=         取整除赋值运算
    特别强调：Python不支持自增自减运算，++a、--a都是正负号，结果都是自己本身

5、Python字符串：
    ① 字符串的拼接：
        print语句内使用","拼接,但是","会被替换为空格,是因为print重载了这样的方法print(数据,数据,分隔符<默认是空格>)
        使用"+"拼接，但是只能在字符串之间进行拼接，不能像java一样直接做字符串加法运算
    ② 字符串的两种格式化方式：
        1.使用占位符
            %s      字符串型
            %d      整型
            %f      浮点数型
            语法     print("每日增长系数: %.1f，经过%d天的增长后，股价达到了：%.2f" % (a, b, c))
            和C占位符的区别：同样支持精度控制，但python格式区分并不严谨，使用 %s可以直接格式化整型和浮点型，
                          参数统一写在字符串后面，若有多个参数，需要用小括号括起来
        2.快速格式化
            格式:  f"{变量1}{变量2}"  句尾无需跟参数
            特点：不做类型限制、也不做精度控制
            实例：print(f"我是{name}，我成立于：{set_up_year}年，我今天的股价是：{stock_price}")

6、Python的输入语句
    input()函数，可以把字符串作为该函数的参数，作用是在输入之前进行提示
    默认的返回值为字符串类型，若想取得数字需要使用int()、float()进行类型转换
    注：java中的输入语句可以先定输入类型，比如nextInt()方法，不需要类型转换

7、Python的条件判断语句：
    Python中的否定用"not"表示，不支持用"!"表示
    注：Python靠缩进区分代码块，一般是四个空格
        情况一：
            if 逻辑表达式 :
                语句1
                语句2
            非缩进语句，不算在代码块中
        情况二：
            if 逻辑表达式 :
                语句1
                语句2
            else :
                语句1
        情况三：
            if 逻辑表达式 :
                语句
            elif 逻辑表达式 :
                语句
            else :
                语句

8、Python中的循环
    ①while循环
        while 逻辑表达式 :
            循环体
    ②for循环
        for 临时变量 in 待处理数据集:
            循环体
        特点：无法定义循环条件，只能被动取出数据处理，因为数据集不可能无限，理论上不可以无限循环
        实例：
        for x in "我爱你" :
            print(x)//结果是分别将三个字取出
        for循环经常搭配range()函数使用
    ③for循环变量的作用域：
        for x in 数据集 : "x"的作用域理论上只在for循环的代码块中，在代码块外访问虽说允许，但不规范
        不建议这样做,另外JS中完全可以在代码块外访问这种变量，java则完全不允许
    ④Python支持break和continue关键字。

9、range函数
    通过range函数，可以获得一个简单的数字序列（可迭代类型的一种）。
    重载形式：
        ①range(num)
            可获取一个从0开始，到num结束的数字序列（左闭右开）如range(5)取得的数据是：[0, 1, 2, 3, 4]
        ②range(num1,num2)
            获得一个从num1开始，到num2结束的数字序列（左闭右开）如，range(5, 10)取得的数据是：[5, 6, 7, 8, 9]
        ③range(num1,num2,step)
            获得一个从num1开始，到num2结束的数字序列（左闭右开）数字之间的步长，以step为准（step默认为1）
            如，range(5, 10, 2)取得的数据是：[5, 7, 9]
    使用情景：搭配for循环
    如 for x in range(10) : 表示循环10次

10、Python中的None
    Python不支持null关键字，None类似于null的意思，但又不相同。None表示“无意义的值”
    若函数没有设置返回值则，返回None，并且None在条件判断语句中等同于false
    通常给某对象或值设置空引用时用None关键字。

11、Python不支持switch-case语句
    可以通过字典或lambda表达式实现switch-case的效果。直到Python3.10版本的更新才支持
    match-case语句，和switch-case语句是一样的，语法如下：
        match 变量名 :
            case 常量1:
                语句1
            case 常量2 :
                语句2

12、Python函数：
    ①内置函数len()->写入参数，返回值为长度
    ②Python函数和数据库一样，常用分隔符“_”命名，并且全部字母小写，不常用驼峰命名法
    ③函数定义语句为：   def 函数名(参数列表) : 函数体

    ④Python函数的重载实现：
        首先Python不能像java一样的写法重载函数，在Python中，后写的函数会覆盖掉前面的函数
        Python函数的重载通过判断可变形参的长度来实现比如下面一个函数：
            def overlord (*args) :
                if(len(args==1)) :
                    print("函数体")
                elif(len(args)==2) :
                    print("函数体")
          关联记忆：JS中的arguments和Python的*args一样可以用来模拟重载

    ⑤ 函数的返回值：
        若为空返回值，可以写return None ，也可以省略return语句，但是默认还是返回None
        空return 结束当前方法其余无特殊点
    ⑥ 函数的说明文档：
        在函数体内使用多行注释，自动生成说明文档
    ⑦ 函数的作用域：
        在函数体内定义的变量属于局部变量。在Python中在函数体内想要使用局部变量
        但是有缺少变量定义语句作区分，需要使用global关键字,说明函数内使用的是全局变量
    ⑧ 函数的多返回值
        Python支持函数通过return返回多个值(可以是不同类型)，只需要按照顺序接收，中间用逗号隔开即可。
        def test_return():
            return 1，2
        x,y = test_return
        print(str(x),str(y))
    ⑨函数的传参形式
        1、位置参数
            正常函数使用形式，传递的参数和定义的参数的顺序及个数必须一致。
        2、关键字参数
            函数调用时通过“键=值”形式传递参数.容易使用，同时也清除了参数的顺序需求.
            如：user_info(age=20,gender="男",name="小明")
            关键字参数可以和位置参数混用，但是函数调用时，如果有位置参数时，位置参数必须在关键字参数的前面，但关键字参数之间不存在先后顺序
        3、默认参数
            默认参数的定义顺序必须从后往前
        4、不定长参数
            ①位置传递：
                def user_info ( *args ):
                    print(args )
                传进的所有参数都会被args变量收集，它会根据传进参数的位置合并为一个元组(tuple)，args是元组类型，这就是位置传递
            ②关键字传递
                def user_info(**kwargs ) :
                    print ( kwargs )
                参数是“键=值”形式的形式的情况下, 所有的“键=值”都会被kwargs接受, 同时会根据“键=值”组成字典.

    ⑩函数对象做参数
        除了普通函数对象做参数，更常用的是lambda匿名函数做参数
        lambda  传入参数 : 函数体(一行代码)







13、Python容器
    一、python中的容器的介绍：
            Python中，可包含其他对象的对象，称之为“容器”。容器是一种数据结构。
            分为5类，分别是：
            列表（list）、元组（tuple）、字符串（str）、集合（set）、字典（dict）

        ①|-- list列表 ：
                列表是python官方提供的内置的线性表。
                底层实现：基于双向链表结构实现。
                其中列表是无序的可重复的，支持索引，可以像数组一样用下标读写元素

            （1）、list的定义：
                ①变量名称 = [元素1,元素2,元素3,,.....]  如：age = [0,1,2,3,4]
                ②定义空列表：
                    变量名称=[]
                    变量名称 = list()

            （2）、对list索引的理解：
                list支持像其他语言的数组一样操作元素，从前向后的方向，从0开始，依次递增
                或者，可以反向索引，也就是从后向前：从-1开始，依次递减。
                若是list进行了嵌套，则可以像二维数组一样操作list对象

            （3）、列表操作的常用方法：
                增：
                    |-- append(ele)                 # 在尾部追加新的元素
                    |-- insert(index, ele)          # 在特定的位置添加元素，索引从0开始
                    |-- extend(list)                # 合并列表也可通过运算符号直接相加，列表 + 列表#等价于extend
                删：
                    |-- clear()                     # 清空列表
                    |-- remove(ele)                 #移除列表中某个值的第一个匹配项
                    |-- pop(index)                  # 删除元素，等同于del 列表对象[index]，省略参数默认删除最后一个元素
                    |-- del 列表对象[index]
                改：
                    |-- 通过下标索引修改
                查：
                    |-- index(ele)                  # 返回查找到的第一个元素位置，元素不存在则报错
                功能性：
                    |----len(Iterable)              #获取列表的长度：返回这个可迭代对象(Iterable) 的长度。
                    |-- count(ele)                  # 返回元素的数量
                    |-- reverse()                   # 翻转列表顺序
                    |-- sort()                      # 排序
                    |-- copy()                      # 拷贝、复制，对象拷贝，对象浅拷贝

            （4）、对列表的"+"运算理解
                结果上相当于extend(list)方法，可以直接通过加号进行列表之间的拼接。
                实际上extend方法是在调用者尾部增加数据，修改了原数据，"+"则是返回了
                一个新的列表，没有对原数据进行修改。

            （5）、列表的特点
                可以容纳多个元素（上限为2**63-1、9223372036854775807个）
                可以容纳不同类型的元素（混装）
                数据是有序存储的（有下标序号）
                允许重复数据存在
                可以修改（增加或删除元素等）

            （6）、列表的遍历：
                ①for循环
                        for 临时变量 in Iterable:
                            print(临时变量)
                ②while循环
                    index=0
                    while index<len(list) :
                        print(list[index])
                        index++


    ②|-- tuple  元组
        介绍：
            是一种不可变数据类型，基本数据类型也是不可变数据类型，所以表示的就是的固定的值，固定的一组值。
            但如果不可变数据类型中如果存在了可变数据类型，这个子对象是可以发生变化的。
        存储结构：
            长度固定的数组，可以通过下标来访问
        特点：
            ①元组的元素一旦定义，就无法修改！！！
            ②当定义一个tuple时，在定义的时候，tuple的元素就必须被确定下来
            ③元组同样支持嵌套，可以像二维数组一样操纵元组。
            ④元组由于不可修改的特性，所以其操作方法非常少。


        （1）、tuple的定义：
        ①元组名 = ( 元素1 , 元素2 , ... ... )
        ②定义空元组：
            变量名称=()
            变量名称=tuple()
        ③注意点：元组只有一个数据，这个数据后面要添加逗号，例如元组名 = ( 元素 ,)
        （2）、元组操作的常用方法：
            |-- count(ele)              # 返回元素的数量
            |-- index(ele)              # 访问元素
            |-- len()                   #求元组长度

        （3）、元组的遍历：
            ①while循环
            ②for循环

    ③|--str 字符串容器
        （1）、特点：
            ①和其它容器如：列表、元组一样，字符串也可以通过下标进行访问从前向后，下标从0开始，从后向前，下标从-1开始
            ②同元组一样，字符串是一个：无法修改的数据容器。
        （2）、字符串的常用操作：
            字符串.index(字符串)              #查找指定子串第一次出现的索引
            字符串.replace(字符串1，字符串2）  #将字符串内的全部：字符串1，替换为字符串2，不是修改字符串本身，而是得到了一个新字符串
            字符串.split(分隔符字符串）       #按照指定的分隔符字符串，将字符串划分为多个字符串，存入列表对象中并返回
            字符串.strip()                  #去前后空格
            字符串.strip(字符串)              #去前后指定字符串
            字符串.count(字符串)              #统计某子串出现的次数
            len(字符串)                       #统计字符串长度
        （3）、str的遍历：
            ①while
            ②for
        (4)、Python如何反转字符串.反转方法：
              1、使用切片法来反转，语法“字符串 [::-1]”。.
              2、首先将字符串转换成列表；然后使用reverse ()反转列表元素；最后将反转的列表转换会字符串即可。.
              3、使用reduce ()函数，语法“reduce (lambda x,y:y+x,字符串)”。




    ④|-- set 集合
        特点：
            ①集合是无序的，所以集合不支持下标索引访问，但是集合和列表一样，是允许修改的
            ②集合是不支持元素重复的
        集合的定义
            ①变量名称 = set{元素1,元素2,元素3....}
            ②定义空集合：
                变量名称 =set()
                不支持！"变量名称={}",{}中必须有值，如果没有值，则默认是dict，不是set

        （2）、集合操作的常用方法：
            |-- add(ele)                            # 添加元素
            |-- clear()                               # 清空列表
            |-- copy()                               # 浅拷贝
            |-- difference(set)                  # 差集,得到一个新集合，原集合不变
            |-- difference_update(set)           # 差集,原集合改变
            |-- intersection(set)               # 交集，得到的是新集合
            |-- union(set)                        # 并集，得到的是新集合
            |-- update(set)                      # 合并两个集合
            |-- discard(ele)                     # 移除元素，如果该元素不存在，则什么都不做
            |-- remove(ele)                    # 移除元素，如果该元素不存在，则抛出异常
            |-- pop()                              # 删除最后一个元素(并不一定是最后添加的元素，表面上看是随机的)

        注意：set没有办法使用while 遍历数据，只能使用for循环


    ⑤|-- dict 字典
        字典和集合一样，底层实现就是一个hashtable，不允许key的重复，和Java一样，键相同，值覆盖
        最终的表示方式：
                键值对：一个唯一键对应一个值，一一对应的关系,键必须不可变，所以可以用数字，字符串或元组充当

        （1）、定义字典：
            ①变量名={key1:value1,key2:value2,key3:value3...}
            ②定义空字典:
                ①可量名称 = {}
                ②变量名=dict()

        （2）、字典操作的常用方法：
            |-- clear()                    # 删除字典内所有元素
            |-- copy()                    #返回一个字典的浅复制
            |-- d[key]                    # 可完成查询、添加、修改功能
            |-- get(key, [default])   # 就可以获取字典中，key对应的值，如果不存在，则返回None
            |-- setdefault()       # 和get()类似, 但如果键不存在于字典中，将会添加键并将值设为default
            |-- keys()                  # 获取所有的键
            |-- values()               #  以列表返回字典中的所有值
            |-- items()                # 以列表返回可遍历的(键, 值) 元组数组
            |-- pop(key)             # 通过key，删除键值对
            |-- popitem()            #  返回并删除字典中的最后一对键和值。
            |-- update()             # 合并字典  等价于 {**对象, **对象}
            |-- fromkeys(iterable)    # 生成一个新的字典对象

        （3）、如何遍历字典：
            ①for i in 对象.keys():        #字典的键
                print(i, 对象[i])

            ②for i in 对象:                #自动对临时变量进行了处理，临时变量就是key的集合
                print(i, 对象[i])

            ③for item in 对象.items():              #字典的键和值
                print(item[0], item[1])

            ④for (key, value) in 对象.items():             #字典的键和值
                print(key, value)

            ⑤for key, value in 对象.items():                #字典的键和值
                print(key, value)


14、序列及切片：
  序列的概念：
    内容连续、有序，可使用下标索引的一类数据容器，列表、元组、字符串，均可以可以视为序列。
  切片的概念：
      切片：从一个序列中，取出一个子序列，序列支持切片，即：列表、元组、字符串，均支持进行切片操作
  切片操作语法：
      object[start_index : end_index : step]
      返回值类型和操纵的序列一致，如string的切片返回值就是string
      1、start_index：切片的起始位置（包括该位置），0表示从第一个开始，1表示从第二个开始，
      以此类推。-1表示从倒数第一个开始，-2表示从倒数第二个开始，以此类推。缺省时取0或-1（即step为正数取0，负数取-1）
      2、end_index：切片的结束位置(！！！且不包括该位置)，0表示第一个为终点，1表示第二个为终点，以此类推。
      -1表示倒数第一个为终点，-2表示倒数第二个为终点，以此类推。缺省时默认为序列长度（step为正数取正，step负数取负）
      3、step，表示步长。可取正负数，正数表示从左往右，负数表示从右往左。缺省时取1
      4、当只写一个冒号时默认缺省step参数，默认值为1
        切片的一些练习：https://blog.csdn.net/weixin_42882419/article/details/105680133
      5、永远默认是左闭右开，即使左边的数大于右边的数，比如
        my_str = "万过薪月，员序程马黑来，nohtyP学"
        result1 = my_str[9:4:-1]---->"黑马程序员"


15、Python输出流
     Python中print 和input 调用 了 Python中底层 的 什么方法
     print 方法 默认 调用 sys.stdout.write 方法 ，即往控制台打印字符串。
     当然二者也有区别：1.sys.stdout.write ()结尾没有换行，而 print ()是自动换行的
        　　2.sys.stdout.write()只接收字符串格式的参数，且只能接收一个参数
        　　3.print()能接收多个参数输出

16、Python输入流
    在python中，当我们使用input()方法的时候，其实我们调用的是sys.stdin.readline()

17、Python中的str():
    str()函数不止是做字符串类型转换的函数，同时也担任了其他语言里tostring方法的功能
    在print函数里打印对象，自动调用了str()函数  (暂时停留在猜想)
    因为str(元组、列表等做参数时)，输出结果和print函数一模一样
    深入：这里说错了，str()底层实际调用的是__str__()方法，__str__才是担任了同String方法的那一位


18、Python中的变量提前声明:
    经实验，Python中不存在类似"变量的提前声明"的行为，首先Java语言中不支持，JS语言中支持，但是也仅仅
    只是提前声明，提前访问的话值的undefined，而Python中，不仅没有变量的提前声明，函数的调用语句也必须写在
    函数的定义语句之后(函数提前调用函数除外)，归根结底是因为Python是解释型语言，不存在提前编译的行为
    经查阅：
    实际上 Python 中并不存在函数提前声明一说，也不能像 Java 那样函数可以写在任意位置，
    因为 Java 混合型的语言，Python 是解释型的。
    疑问：为什么JS也是解释型语言却可以有变量、函数提前的特性？
        暂时解释为浏览器内核帮助js做到了这种事



19、Python运算符重载：
    Python语言提供了运算符重载功能，增强了语言的灵活性，这一点与C++有点类似又有些不同。鉴于它的特殊性，
    今天就来讨论一下Python运算符重载。Python语言本身提供了很多魔法方法，它的运算符重载就是通过重写这些Python内置魔法方法实现的。
    这些魔法方法都是以双下划线开头和结尾的，类似于__X__的形式，python通过这种特殊的命名方式来拦截操作符，以实现重载。
    当Python的内置操作运用于类对象时，Python会去搜索并调用对象中指定的方法完成操作。类可以重载加减运算、打印、函数调用、
    索引等内置运算，运算符重载使我们的对象的行为与内置对象的一样。Python在调用操作符时会自动调用这、样的方法，
    例如，如果类实现了__add__方法，当类的对象出现在+运算符中时会调用这个方法。

20、Python中的del关键字：
    del 用于删除对象。在 Python，一切都是对象，因此 del 关键字可用于删除变量、列表或列表片段等。

21、Python的IO流
    1)IO的分类--->作为open函数中的mode参数，如"w"、"r"、"rb"、"wt"等.
        ①根据数据流动方向
            r——输入流
            w——输出流
        ②根据数据的类型
            b——字节流
            t——字符流
        ③"a"——表示追加输出
    2)得到文件对象，打开输入流：
        使用open函数，可以打开一个已经存在的文件，或者创建一个新文件，声明如下：
        open(name, mode, encoding)//返回值为即为读取的文件对象
        参数说明：
            name：是要打开的目标文件名的字符串(可以包含文件所在的具体路径)。
            mode：设置打开文件的模式(访问模式)：只读、写入、追加等。
            encoding:编码格式（推荐使用UTF-8）
        应用实例：
            f = open('python.txt', 'r', encoding=”UTF-8“)
            # encoding的顺序不是第三位，所以不能用位置参数，用关键字参数直接指定
     3)mode常用的三种访问模式：
         ①r：以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。如果文件不存在则会报FileNotFind错误
         ②w：打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，原有内容会被删除。如果该文件不存在，创建新文件。
         ③a：打开一个文件用于追加。如果该文件已存在，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。
     4)文件的读取方法：---->一般使用open的r模式打开
         ①read()方法：
             文件对象.read(num)
             num表示要从文件中读取的数据的长度（字节或者字符数，取决于文件的打开方式），如果没有传入num，那么就表示读取文件中所有的数据
         ②readline()方法：
             文件对象.readline(num)
             readline()函数用于读取文件中的一行，包含最后的换行符“\n”,num为可选参数，用于指定读取每一行时，一次最多读取的字符（字节）数。
             注：由于 readline() 函数在读取文件中一行的内容时，会读取最后的换行符“\n”，
                 再加上 print() 函数输出内容时默认会换行，所以输出结果中会看到多出了一个空行。
         ③readlines()方法
             文件对象.readlines()---->返回值为列表
                 readlines()函数用于读取文件中的所有行，只不过该函数返回是一个字符串列表，
                 其中每个元素为文件中的一行内容。在读取每一行时，会连同行尾的换行符一块读取
         注：关于以上方法的注意事项，三个方法是互相关联的，三个方法共用一个文件对象的指针，声明在后面的
            调用会从指针移动后的位置开始。

     5)for循环与文件的读取：
         for line in 文件对象:
               print(line)
     6)文件的关闭：
        文件对象.close()
     7)open with语法：
        说明:
            使用open with 语法对文件进行操作，会自动调用close方法，不用再手动关闭。但需要注意的是代码要写在语句块里
        格式：
            with open("python.txt", "r") as f:
                f.readlines()
     8)文件的写入：----->一般以open的"a"或者"w"模式打开
        ①write方法：
            对象.write()
        ②flush方法
            对象.flush()
        注意：
            直接调用write，内容并未真正写入文件，而是会积攒在程序的内存中，称之为缓冲区
            当调用flush的时候，内容会真正写入文件
            这样做是避免频繁的操作硬盘，导致效率下降（攒一堆，一次性写磁盘）

22、Python异常
    语法格式 ：
        try:
            可能出现异常的代码块
        except 异常类型 as 别名:
            处理异常的方式
        else:
            未出现异常时执行的代码
        finally:
            资源关闭

    注意：
        所有异常类型可以用Exception接收，别名通常使用e
    异常的传递：
        假如函数1出现了异常没有进行捕获，会被它的调用者捕获，以此类推，若都没有捕获才会报错。

23、Python模块
    概念：
        模块(Module)，是一个 Python 文件，以 .py 结尾.  模块能定义函数，类和变量，模块里也能包含可执行的代码.
        模块里面有类、函数、变量等，我们可以导入模块去使用
    声明格式：
        [from 模块名] import [模块|类|变量|函数|*] [as 别名]
    常见格式如下：
        import  模块名
        from    模块名 import  类、变量、方法等
        from    模块名 import  *
        import  模块名 as  别名
        from    模块名 import  功能名 as  别名
    演示：
        ①import 模块名
          import    模块名1，模块名2
          调用：模块名.功能名()
          注：这种方式，调用功能必须加上模块名
        ②from   模块名 import  功能名
          调用：功能名()
          注：这种方式可以不加模块名
        ③from   模块名 import *
          功能名()
          注：这种导入方式关系到__all__变量，*只能导入__all__中声明的内容
        ④import 包名.模块名/包名.模块名.目标
            调用  包名.模块名()/包名.模块名.目标()
        ⑤from   包名  import  模块名.目标
            调用：模块名.目标()

        总结：
            1)调用时声明到那个层级主要看import关键字，import后跟到那个层级，调用时就要把import后跟的全写上
            2)以上所有形式均可使用"as"添加别名，别名可省略
            3)涉及到*的导入关系到__all__变量
    __name__属性：
        引入：导入模块时，模块中若有函数的调用声明(由于测试模块功能，开发者会写在模块中)，会自动调用
        为了解决这个问答，只需要在模块函数调用声明前加上条件判断语句：
            if __name__ == '__main__':      ----->快捷键：main
                函数调用声明
        只有当前点击执行的类__name__属性会被置位__main__
    模块导入冲突：
        若导入重名模块，或者重名的功能，声明在后面的会覆盖声明在前面的。
        和函数的定义相同，Python允许定义同名函数，只不过会覆盖
    __all__属性：
        和*相关，存储的是一个列表，记录了可以引入的功能。

24、Python包：
    概念：
        整合了Python模块，从物理上看，包就是一个文件夹，在该文件夹下包含了一个 __init__.py 文件，
        该文件夹可用于包含多个模块文件。从逻辑上看，包的本质依然是模块
    __init__.py
        新建包后，包内部会自动创建`__init__.py`文件，这个文件控制着包的导入行为,
        以包为单位导入*时，需要在__init__.py中显式定义__all__属性的值。
    第三方包：
        科学计算中常用的：numpy包
        数据分析中常用的：pandas包
        大数据计算中常用的：pyspark、apache-flink包
        图形可视化常用的：matplotlib、pyecharts
        人工智能常用的：tensorflow
        ..........
    安装方式：
        ①命令行安装
            pip install 包名称
            pip install -i https://pypi.tuna.tsinghua.edu.cn/simple 包名称
        ②通过PyCharm安装

25、pyecharts(数据可视化模块)
    ①折线图
    ②地图
    ③动他柱状图
    详见课件
26、Python面向对象
    ①类的定义语法         ----->一个.py文件中可以定义多个类
        class 类名 :
            代码块     ----->如name=None
    ②实例化对象语法:
        变量名 = 类名()
    ③调用对象结构语法：
        对象名.属性
        对象名.方法()
    ④成员方法的定义：
        def 方法名(self,形参1,形参2,....):
            方法体
        注：self关键字是成员方法定义的时候，不管是构造方法还是普通方法，必须填写的。它用来表示类对象自身，不可省略
        当我们使用类对象调用方法的是，self会自动被python传入在方法内部，想要访问类的成员变量，必须使用self
    ⑤self关键字
        相当于Java中的this关键字，只是Python中要求必须显示声明，因为python变量的声明语句过于简单，在类方法的
        内部必须要使用self关键字进行区分。方法定义的时候必须显式定义self参数，传参时可省略。
    ⑥构造方法：
        定义形式：
            __init__() :    ---》注意和__init__.py做区分
                代码块
        调用形式：
            在创建类对象的时候，会自动执行。
            在创建类对象的时候，将传入参数自动传递给__init__方法使用。
        注：
            __init__()属于魔术方法
            切不可忘记显式声明self参数
            在类的定义中属性的声明可以省略，直接在构造方法中赋值即可。
    ⑦魔术方法：
        在Python中，所有以双下划线__包起来的方法，统称为Magic Method（魔术方法），它是一种的特殊方法，普通方法需要调用，
        而魔术方法不需要调用就可以自动执行。魔术方法在类或对象的某些事件出发后会自动执行，让类具有神奇的“魔力”。
        如果希望根据自己的程序定制自己特殊功能的类，那么就需要对这些方法进行重写。
        Python中常用的运算符、for循环、以及类操作等都是运行在魔术方法之上的。
        Python运算符的重载、对象的实例化等都是通过魔术方法实现的。
        常见的魔术方法：
            __init__    构造方法
            __str__     字符串方法               相当于toString，不重写默认返回地址
            __lt__      大于、小于符号比较
            __le__      大于等于、小于等于符号比较
            __eq__      ==符号比较              相当于equals，不重写默认比较地址
        注：以上方法只需在类中重写，进行运算的时候自动调用
        例子：（lt、le、eq的重写）
            def __lt__(self,other):
                return self.age<other.age
            def __le__(self,other):
                return self.age<=other.age
            def __eq__(self,other):
                return self.age=other.age
        更多详见：https://blog.csdn.net/weixin_44983653/article/details/123968967?spm=1001.2101.3001.6650.1&utm_medium=
        distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-1-123968967-blog-105242274.pc_
        relevant_3mothn_strategy_and_data_recovery&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBl
        ogCommendFromBaidu%7ERate-1-123968967-blog-105242274.pc_relevant_3mothn_strategy_and_data_recovery&utm_relevant_index=2

    ⑧pass关键字：
        pass是占位语句，用来保证函数、类定义的完整性，表示无内容，空的意思。

    ⑨封装：
        如何定义私有属性和私有方法：
            私有成员变量：变量名以__开头（2个下划线）
            私有成员方法：方法名以__开头（2个下划线）
        注:
            以"__"开头，并且以"__"结尾的属性或者是方法并不是私有的，不过共识是不去访问。
    ⑩继承
        Python支持单继承和多继承，继承访问不到父类中的私有属性和方法
        单继承语法：
            class 类名(父类名) :
                类内容体
        多继承语法：
            class 父类(父类1,父类2,父类3,...) :
                类内容体
        多继承中若父类与父类的属性或者方法重名 ：
            继承的优先级为从左到右，遵循先继承的保留，后继承的被覆盖

    ①①重写
        主要讲解子类如何调用父类中被覆盖的属性或方法
        方式一：
            使用成员变量：父类名.成员变量
            使用成员方法：父类名.成员方法(self)   #这种方式必须加参数self！
        方式二：
            使用成员变量：super().成员变量
            使用成员方法：super().成员方法()   #这种方式不用加参数self！

        注意点：
            以上两种方式访问父类同名的成员变量只适用于在父类中显示定义了该属性
            而不适用于仅在构造函数中定义该同名变量。
            若仅在构造函数中定义该同名变量，在用以上两种方式访问父类属性时，首先需要执行父类的
            初始化工作，去加载父类属性。即：父类名.__init(self)，重新访问子类属性时人需要重新初始化子类
            详见：https://blog.csdn.net/weixin_45901519/article/details/110534655

    ①②类型注解：
    Python在3.5版本的时候引入了类型注解，以方便静态类型检查工具，IDE等第三方工具。
    类型注解：在代码中涉及数据交互的地方，提供数据类型的注解（显式的说明）。
    主要功能：
        帮助第三方IDE工具（如PyCharm）对代码进行类型推断，协助做代码提示
        帮助开发者自身对变量进行类型注释
    支持：
        变量的类型注解
        函数（方法）形参列表和返回值的类型注解
    1)为变量设置类型注解
        基本数据类型注解：
            var_1: int = 10;
            var_2: float = 3.14;
            var_3: str = "abc";
        类对象类型注解：
            class Student:
                pass
            stu Student =Student()
    2)容器类型注解
        基本容器注解
            my_list: list = [1，2，3]
            my_tuple: tuple = (1， 2，3)
            my_set: set = {1，2,3}
            my_dict: dict = {"itheima":666}
            my_ str: str ="i thei ma“
        容器详细注解：
            my_ _list: list[int] = [1，2，3]
            my_ tup1e: tup1e[str,int,boo1] = ("itheima", 666, True)
            my_ set: set[int] = {1,2,3}
            my_ dict: dict[str,int] = {"itheima": 666}
    3)注释型类型注解：
        语法:
            # type: 类型
            var_1 = random. randint(1，10)       # type: int
            var_2 = j son.1oads (data)          # type: dict[str， int]
            var_ _3 = func()                    # type: Student
    4)类型注解仅仅只是提示性的
        并不会真正的对类型做验证和判断。也就是，类型注解仅仅是提示性的，不是决定性的
        即使被赋予完全不同的类型也不会报错
    5)函数的参数的类型注解：
        def 函数方法名(形参名: 类型,形参名: 类型,形参名: 类型,...):
            pass
    6)函数的返回值类型注解
        def 函数方法名(形参名: 类型,形参名: 类型,形参名: 类型,...) -> 返回值类型:
                pass

    7)Union联合类型注解
        需要导入Union模块
        my_ _list: list[union(int， str)] = [1，2，"itcast"， "itheima"]
        my_ _dict: dict[str， Union[str，int]] ={"name": "周杰轮"，"age": 31}
        def func(data: Union[int， str]) -> Union[int， str]:
            pass

    ①③多态
        抽象方法：
            实现为空实现的方法，意味着方法体为pass
        抽象类：
            含有抽象方法的类
27、Python&MySQL
    在Python中，使用第三方库：pymysql 来完成对MySQL数据库的操作。
    pymysql的安装：pip install pymysql
    简单应用：
        ①导包：from pymysql import Connection
        ②使用构造器获取Connection对象:(使用关键字参数)
        conn=Connection(
            host="loaclhost" , # 主机名
            port=3306,         # 端口号
            user="root",        #账户名
            password="abc123"   #密码
            autocmmit="True"/"False"
        )
        ③得到游标对象：cursor=conn.cursor()
        ④选择使用的数据库: cursor.select_db("数据库名")
        ⑤执行DDL、查询语句：cursor.execute("SQL")  #不需要手动commit
        ⑥执行DML、除查询语句：cursor.execute("SQL")  #若没有设置自动提交需要手动commit
        ⑦获取查询结果：result: tuple =cursor.fetchall()
        ⑧对查询结果进行遍历: for r in result :
        ⑨关闭数据库连接：conn.close()










