零：引入：
1、什么是 JavaWeb？
    JavaWeb 是指，所有通过 Java 语言编写可以通过浏览器访问的程序的总称，叫 JavaWeb。
    JavaWeb 是基于请求和响应来开发的。
2.Web 资源的分类：
    web 资源按实现的技术和呈现的效果的不同，又分为静态资源和动态资源两种。
    静态资源： html、css、js、txt、mp4 视频 , jpg 图片
    动态资源： jsp 页面、Servlet 程序
3、 常用的 Web 服务器：
    ①Tomcat：由 Apache 组织提供的一种 Web 服务器，提供对 jsp 和 Servlet 的支持。它是一种轻量级的 javaWeb 容器（服务
              器），也是当前应用最广的 JavaWeb 服务器（免费）。
    ②Jboss：是一个遵从 JavaEE 规范的、开放源代码的、纯 Java 的 EJB 服务器，它支持所有的 JavaEE 规范（免费）。
    ③GlassFish： 由 Oracle 公司开发的一款 JavaWeb 服务器，是一款强健的商业服务器，达到产品级质量（应用很少）。
    ④Resin：是 CAUCHO 公司的产品，是一个非常流行的服务器，对 servlet 和 JSP 提供了良好的支持，
            性能也比较优良，resin 自身采用 JAVA 语言开发（收费，应用比较多）。
    ⑤WebLogic：是 Oracle 公司的产品，是目前应用最广泛的 Web 服务器，支持 JavaEE 规范，
            而且不断的完善以适应新的开发要求，适合大型项目（收费，用的不多，适合大公司）。

一、JQuery部分：
1、什么是 jQuery ?
	jQuery，顾名思义，也就是 JavaScript 和查询（Query），它就是辅助 JavaScript 开发的 js 类库。
   jquery-1.7.2.js是JQuery的js文件，需要用script标签引入，jquery-1.7.2.min.js是去除缩进后的js文件
   使用后者可以更快的载入。
2、jQuery核心思想？
	它的核心思想是 write less,do more(写得更少,做得更多)，所以它实现了很多浏览器的兼容问题。
3、jQuery好处？
	jQuery 是免费、开源的，jQuery 的语法设计可以使开发更加便捷，例如操作文档对象、选择 DOM 元素、
  制作动画效果、事件处理、使用 Ajax 以及其他功能
4、jQuery核心函数：$
	①、传入参数为 [ 函数 ] 时：
		表示页面加载完成之后。如：$(function(){ 代码}); 相当于 window.onload = function(){代码}
	②、传入参数为 [ HTML 字符串 ] 时：
		会对我们创建这个 html 标签对象(jQuery对象而不是DOM对象)
	③、传入参数为 [ 选择器字符串 ] 时：
		$(“#id 属性值”); id 选择器，根据 id 查询标签对象
		$(“标签名”); 标签名选择器，根据指定的标签名查询标签对象
		$(“.class 属性值”); 类型选择器，可以根据 class 属性查询标签对象
		注：返回的对象为jQuery对象，是个伪数组，里面的元素是DOM对象！
	④、传入参数为 [ DOM 对象 ] 时：
		会把这个 dom 对象转换为 jQuery 对象

5、jQuery对象和dom对象区分：
	①、通过DOM查询得到的对象是DOM对象，DOM对象打印出来的效果为：[object HTML 标签名 Element]
	②、通过jQuery提供的API创建、查询到的对象是jQuery对象，通过 JQuery 包装的 Dom 对象，也是 JQuery 对象
		jQuery 对象 Alert 出来的效果是：[object Object]

6、jQuery对象的本质：
	jQuery 对象是 dom 对象的数组 + jQuery 提供的一系列功能函数。每个jQuery对象都是一个伪数组，里面封装了DOM对象

7、jQuery  对象和 Dom 对象使用区别 对象使用区别：
	jQuery 对象不能使用 DOM 对象的属性和方法
	DOM 对象也不能使用 jQuery 对象的属性和方法
	注：jQuery相当于一个类，每个jQuery实例对象中的隐式原型指向jQuery类的显式原型

8、Dom  对象和 jQuery 对象互转：
	① 、dom  对象转化为 jQuery  对象（* 重点）
		1、先有 DOM 对象
		2、$( DOM 对象 ) 就可以转换成为 jQuery 对象
	② 、jQuery  对象转为 dom  对象（* 重点）
		1、先有 jQuery 对象
		2、jQuery 对象[下标]取出相应的 DOM 对象

9、jQuery选择器：
	通过核心函数$来完成
	$("CSS选择器")，支持所有CSS选择器，还有更强大的选择器，具体见03_jQuery—pdf文档及jQuery API文档

10、jQuery中的方法：
	注意：jQuery本身就是DOM对象的伪数组，调用以下方法相当于给多个DOM对象都进行了操作
	click(函数对象)---》为jQuery对象绑定单击响应函数
	css("属性名","属性值")---》为jQuery对象修改css属性
	val("字段")---》为jQuery对象修改value
	each方法：jQuery中提供的遍历数组的方法
			// 在遍历的function函数中，有一个this对象，这个this对象，就是当前遍历到的dom对象
			$checkboies.each(function () {
				alert( this.value );
			});

11、jQuery中的属性操作：
	注：说是属性，更像是方法，当不传参数时，返回值为对相应属性的值，当传入参数时，起修改作用
	①html() 它可以设置和获取起始标签和结束标签中的内容。 跟 dom 属性 innerHTML 一样。
	②text() 它可以设置和获取起始标签和结束标签中的文本。 跟 dom 属性 innerText 一样。
		辩：html和text的区别在于：当传入"<h1>我是标签<h1/>"时，html会把它转换成标签，而text会把它转换成纯文本
	③val() 它可以设置和获取表单项的 value 属性值。 跟 dom 属性 value 一样
		用法：获取用法不做赘述，主要讲解设置用法。可以用于设置单选、多选、下拉框的选中情况
			 语法：jQuery对象.val(["value值1","value值2"...]),其中jQuery对象指一组单选按钮对象
			 、一组多选按钮对象、一组seclect对象....，value值表示要选中的对象，演示请看04_->test2.html

	④attr() 可以设置和获取属性的值，不推荐操作 checked、readOnly、selected、disabled 等等
		使用形式jQuery对象.attr("属性名")或jQuery对象.attr("属性名","属性值"),当传入一个参数时
		用于获取属性值，当传入两个参数时，用于设置属性值。
		attr 方法还可以操作非标准的属性。比如自定义属性：abc,bbj
	⑤prop() 可以设置和获取属性的值,只推荐操作 checked、readOnly、selected、disabled 等等
		使用方法和attr方法一样，读取时只传入一个参数即可，设置时，第二个参数是bool类型
		这两个方法见04_jQuery-->text3.html

12、在jQuery事件的函数对象中，this指的是当前正在响应事件的dom对象！详见jQuery实现全选/全不选
	04_jQuery->练习-->练习02

13、jQuery操作DOM增删改：
	注：a，b都是jQuery对象，且插入是移动式插入，相当于把原来的对象删除后添加到新的位置
	内部插入：
		appendTo() 		a.appendTo(b) 		把 a 插入到 b 子元素末尾，成为最后一个子元素
		prependTo() 	a.prependTo(b) 		把 a 插到 b 所有子元素前面，成为第一个子元素
	外部插入：
		insertAfter() 	a.insertAfter(b) 	得到 ba
		insertBefore() 	a.insertBefore(b) 	得到 ab
	替换:
		replaceWith() 	a.replaceWith(b)	用 b 替换掉 a
		replaceAll() 	a.replaceAll(b) 	用 a 替换掉所有 b
	删除：
		remove() 		a.remove(); 		删除 a 标签
		empty() 		a.empty(); 			清空 a 标签里的内容
	
	详见：jQuery手册、04_jQuery/练习/练习04/从左到右，从右到左__.html及练习05

14、 在事件响应的function函数中，有一个this对象。这个this对象是当前正在响应事件的dom对象！
	详解：①$obj.click(function(){this})---->this是当前响应的dom对象
	     ②$obj.click(function(){innerfun(){this}()})--->this是window
		 ③$obj.click(funName)--->this是在funName中体现为当前响应的dom对象

15、jQuery修改CSS样式：
	addClass() - 向被选元素添加一个或多个类
	removeClass() - 从被选元素删除一个或多个类 
	toggleClass() - 对被选元素进行添加/删除类的切换操作 
	offset() - 返回第一个匹配元素相对于文档的位置。
	详见：jQuery手册-》CSS

16、jQuery实现动画：
	基本动画
		show() 将隐藏的元素显示
		hide() 将可见的元素隐藏。
		toggle() 可见就隐藏，不可见就显示。
		以上动画方法都可以添加参数。
			1、第一个参数是动画 执行的时长，以毫秒为单位
			2、第二个参数是动画的回调函数 (动画完成后自动调用的函数)
	淡入淡出动画
		fadeIn() 淡入（慢慢可见）
		fadeOut() 淡出（慢慢消失）
		fadeTo() 在指定时长内慢慢的将透明度修改到指定的值。0 透明，1 完成可见，0.5 半透明
		fadeToggle() 淡入/淡出 切换
			1、第一个参数是动画 执行的时长，以毫秒为单位
			2、第二个参数是动画的回调函数 (动画完成后自动调用的函数)
	更多见jQuery手册，复习时记得实现jQuery轮播图

17、jQuery事件操作：
	$( function(){} );和window.onload = function(){}的区别：
	①触发时间不同
		1、jQuery 的页面加载完成之后是浏览器的内核解析完页面的标签创建好 DOM 对象之后就会马上执行。
		2、原生 js 的页面加载完成之后，除了要等浏览器内核解析完标签创建好 DOM 对象，还要等标签显示时需要的内容加载
		完成。
	②触发顺序不同：本质上是由①决定的
		1、jQuery 页面加载完成之后先执行
		2、原生 js 的页面加载完成之后
	③触发次数不同：
		1、原生 js 的页面加载完成之后，只会执行最后一次的赋值函数。
		2、jQuery 的页面加载完成之后是全部把注册的 function 函数，依次顺序全部执行。



二、XML部分：
1、 什么是 xml？
    xml 是可扩展的标记性语言。
2、xml的作用？
    ①、用来保存数据，而且这些数据具有自我描述性
    ②、它还可以做为项目或者模块的配置文件
    ③、还可以做为网络传输数据的格式（现在 JSON 为主）。
3、xml语法：
    ①. 文档声明。
        <?xml version="1.0" encoding="UTF-8"?> xml 声明。
        <!-- xml 声明 version 是版本的意思 encoding 是编码 -->
        而且这个<?xml 要连在一起写，否则会有报错
        *属性
        version 是版本号
        encoding 是 xml 的文件编码
        standalone="yes/no" 表示这个 xml 文件是否是独立的 xml 文件
    ②. 元素（标签）
        xml标签语法基本与html相同，主要有以下几个不同点：
            所有xml标签必须闭合，否则报错。
            xml标签对大小写敏感。
            xml标签必须有自定义的根标签，且只能有唯一一个，这是后来DOM和Sax查询的关键。
            xml标签属性值必须加引号，而html只有当属性值含有空格才必须加
            xml标签名和属性名是自定义的，但是必须遵守命名规范
    ③. xml 属性
    ④. xml 注释
        html 和 XML 注释 一样 : <!-- html 注释 -->
    ⑤. 文本区域（CDATA 区）
        xml中同样存在实体，不能正常的显示特殊字符。
        CDATA 语法可以告诉 xml 解析器，我 CDATA 里的文本内容，只是纯文本，不需要 xml 语法解析
        CDATA 格式：
        <![CDATA[ 这里可以把你输入的字符原样显示，不会解析 xml ]]>
4、xml解析：
    不管是 html 文件还是 xml 文件它们都是标记型文档，都可以使用 w3c 组织制定的 dom 技术来解析。
    dom 解析技术是 W3C 组织制定的，而所有的编程语言都对这个解析技术使用了自己语言的特点进行实现。
    意味着DOM也不是JS专属，java也提供了DOM的实现。
    document 对象表示的是整个文档（可以是 html 文档，也可以是 xml 文档）
    早期 JDK  为我们提供了两种 xml  解析技术 DOM 和 和 Sax  简介( 已经过时，但我们需要知道这两种技术)
    但是！主流的是使用第三方jar包：
    第三方的解析：
    jdom 在 dom 基础上进行了封装 、
    dom4j 又对 jdom 进行了封装。
    pull 主要用在 Android 手机开发，是在跟 sax 非常类似都是事件机制解析 xml 文件。


    dom4j解析技术：
      由于 dom4j 它不是 sun 公司的技术，而属于第三方公司的技术，我们需要使用 dom4j 就需要到 dom4j 官网下载 dom4j
    的 jar 包。
    第一步，先创建 SaxReader  对象。这个对象，用于读取 xml  文件，并创建 Document
             SAXReader reader = new SAXReader();
             Document document = reader.read("src/books.xml");参数是输入流
    第二步，通过 Document 对象。拿到 XML 的根元素对象
            Element root = document.getRootElement();
    第三步，通过根元素对象。获取所有的 book 标签对象
            List<Element> books = root.elements("book");
    第四步，遍历每个 book 标签对象。然后获取到 book 标签对象内的每一个元素
            for (Element book : books) {
            // 拿到 book 下面的 name 元素对象
            Element nameElement = book.element("name");
            // 拿到 book 下面的 price 元素对象
            Element priceElement = book.element("price");
            // 拿到 book 下面的 author 元素对象
            Element authorElement = book.element("author");
            // 再通过 getText() 方法拿到起始标签和结束标签之间的文本内容
            System.out.println("书名" + nameElement.getText() + " , 价格:"
            + priceElement.getText() + ", 作者：" + authorElement.getText());
            }
            }


三、Tomcat部分：
	①简单介绍
	  Tomcat需要与jdk版本兼容，jdk8需要用Tomcat8，版本不能太高。
	  Tomcat本身也是用java和c写的项目，依赖于jdk，Tomcat的可执行文件是startup.bat
	要想执行该文件需要配置jdk到环境变量中。由于idea可以自动启动Tomcat，所以不需要在
	做这个步骤。
	  Tomcat默认的端口号是8080
	  当Tomcat启动后我们可以通过http://localhost:8080/访问到Tomcat的主页面
	②目录介绍
        bin 专门用来存放 Tomcat 服务器的可执行程序
        conf 专门用来存放 Tomcat 服务器的配置文件
        lib 专门用来存放 Tomcat 服务器的 jar 包
        logs 专门用来存放 Tomcat 服务器运行时输出的日记信息
        temp 专门用来存放 Tomcat 运行时产生的临时数据
        webapps 专门用来存放部署的 Web 工程。
        work 是 Tomcat 工作时的目录，用来存放 Tomcat 运行时 jsp 翻译为 Servlet 的源码，和 Session 钝化的目录。
	③简单应用
	  我们可以把项目新建在tomcat/webapps文件夹下，当运行tomcat时，便把项目部署到服务器上
	然后可以通过URL访问访问到该项目。----》http://ip:port/工程名/目录下/文件名
	④IDEA部署Tomcat：
	  参照视频P20、CSDNJavaWeb收藏夹《IDEA ERROR》。
	  整体步骤，新建项目-》右键Add Frameworks Support-》web application-》
	  --》右上角配置Tomcat。。。。
	  注意点：文件应写在web文件夹下，而不是WEN-INF文件夹下！
	 ⑤有些java类不在jdk中，需要添加Tomcat依赖
	 ⑥Tomcat的默认访问
	    1、若只输入ip(域名)，不输入端口号，则默认访问的端口号为80，如www.baidu.com等价于www.baidu.com:80
	    2.若不输入工程名，则默认访问ROOT工程，如http://ip:port/等价于http://ip:port/ROOT
	    3、若不输入资源名，则默认访问index.html，如http://ip:port/工程名/等价于http://ip:port/工程名/index.html
	    注：那么www.baidu.com是否等价于www.baidu.com:80/ROOT/index.html,经测试不可行，为什么？
	 ⑦IDEA配置Tomcat见pdf

四、Servlet部分：
1、什么是 Servlet
    ①、Servlet 是 JavaEE 规范之一。规范就是接口
    ②、Servlet 就 JavaWeb 三大组件之一。三大组件分别是：Servlet 程序、Filter 过滤器、Listener 监听器。
    ③、Servlet 是运行在服务器上的一个 java 小程序，它可以接收客户端发送过来的请求，并响应数据给客户端。

2、servlet的生命周期：
    ①、执行 Servlet 构造器方法
    ②、执行 init 初始化方法
        第一、二步，是在第一次访问，的时候创建 Servlet 程序会调用。
    ③、执行 service 方法
        第三步，每次访问都会调用。
    ④、执行 destroy 销毁方法
    第四步，在 web 工程停止的时候调用。
3、手动实现 Servlet 程序
            ------》需要导入Tomcat/lib/server-api.jar
    核心：html页面通过from标签的action属性到WEB-INF下的web.xml配置文件中可以找到对应的servlet组件
    web.xml介绍：----》详细见Servlet.pdf
        <?xml version="1.0" encoding="UTF-8"?>
        <web-app >
            <servlet>
                <servlet-name>Servlet类的别名</servlet-name>
                <servlet-class>Servlet类的全类名</servlet-class>
            </servlet>
            <servlet-mapping>
                <servlet-name>类的别名</servlet-name>
                <url-pattern>/访问地址</url-pattern>
            </servlet-mapping>
        </web-app>
    方式一：实现Servlet接口的方式-----》不用这种方式
          ①、编写一个类去实现 Servlet 接口
          ②、实现 service 方法，处理请求，并响应数据
          ③、到 web.xml 中去配置 servlet 程序的访问地址
            详细见Servlet.pdf
    方式二：通过继承 HttpServlet 实现 Servlet 程序---》重点
        ①、编写一个类去继承 HttpServlet 类
        ②、根据业务需要重写 doGet 或 doPost 方法
        ③、到 web.xml 中的配置 Servlet 程序的访问地址
        ---->详细步骤见pdf
        快捷的创建方式：
            直接new servlet即可，这种方式只需补充两个方法的方法体，配置<servet-mapping>即可

4、Servlet 类的继承体系
        Interface Servlet(接口)---->Class GenericServlet(对Servlet做了空实现)---
            --->Class HttpServlet(继承了GenericServlet)---->自定义类(需要实现HttpServlet)

5、ServletConfig 类
  介绍：
    ①ServletConfig 类从类名上来看，就知道是 Servlet 程序的配置信息类。
    ②Servlet 程序和 ServletConfig 对象都是由 Tomcat 负责创建，我们负责使用。
    ③Servlet 程序默认是第一次访问的时候创建，ServletConfig 是每个 Servlet 程序创建时，
      就创建一个对应的 ServletConfig 对象。
  三大作用：
     ①、可以获取 Servlet 程序的别名 servlet-name 的值
     ②、获取初始化参数 init-param
     ③、获取 ServletContext 对象
                ---》ServletContext context = getServletConfig().getServletContext();
     xml中<init-param>标签格式
        <init-param>
            <param-name>username</param-name>
            <param-value>root</param-value>
        </init-param>
        <init-param>
            <param-name>url</param-name>
            <param-value>jdbc:mysql://localhost:3306/test</param-value>
        </init-param>

6、ServletContext 类
    什么是ServletContext？
        ①、ServletContext 是一个接口，它表示 Servlet 上下文对象
        ②、一个 web 工程，只有一个 ServletContext 对象实例。
        ③、ServletContext 对象是一个域对象。
        ④、ServletContext 是在 web 工程部署启动的时候创建。在 web 工程停止的时候销毁。
    什么是域对象？
        域对象，是可以像 Map 一样存取数据的对象，叫域对象。
        这里的域指的是存取数据的操作范围，整个 web 工程。
    ServletContext和Map的方法：
                    存数据           取数据              删除数据
        Map         put()           get()              remove()
        域对象       setAttribute()  getAttribute()     removeAttribute();
    ServletContext 类的四个作用：
        ①、获取 web.xml 中配置的上下文参数 context-param
                ---》 context.getInitParameter("参数名")
        ②、获取当前的工程路径，格式: /工程路径
                ---》context.getContextPath()
        ③、获取工程部署后在服务器硬盘上的绝对路径
                ---》 context.getRealPath("/")
        ④、像 Map 一样存取数据

      <context-param>标签：
        <context-param>
            <param-name>username</param-name>
            <param-value>context</param-value>
        </context-param>

五、HTTP协议
1、什么是 HTTP 协议？
       所谓 HTTP 协议，就是指，客户端和服务器之间通信时，发送的数据，需要遵守的规则，叫 HTTP 协议。
    HTTP 协议中的数据又叫报文。

2、请求的 HTTP 协议格式
    客户端给服务器发送数据叫请求。
    服务器给客户端回传数据叫响应。
    请求又分为 GET 请求，和 POST 请求两种

    一、GET请求：
        ①、请求行
            (1) 请求的方式 GET
            (2) 请求的资源路径[+?+请求参数]
            (3) 请求的协议的版本号 HTTP/1.1
        ②、请求头
            key : value 组成 不同的键值对，表示不同的含义。

    二、POST请求：
        ①、请求行
            (1) 请求的方式 POST
            (2) 请求的资源路径[+?+请求参数]
            (3) 请求的协议的版本号 HTTP/1.1
        ②、请求头
            1) key : value 不同的请求头，有不同的含义
        “空行”
        ③、请求体 ===>>> 就是发送给服务器的数据

    三、常见请求头的说明:
        Accept: 表示客户端可以接收的数据类型
        Accpet-Languege: 表示客户端可以接收的语言类型
        User-Agent: 表示客户端浏览器的信息
        Host： 表示请求时的服务器 ip 和端口号

    四、哪些是 GET  请求，哪些是 POST
        GET 请求有哪些：
            ①、form 标签 method=get
            ②、a 标签
            ③、link 标签引入 css
            ④、Script 标签引入 js 文件
            ⑤、img 标签引入图片
            ⑥、iframe 引入 html 页面
            ⑦、在浏览器地址栏中输入地址后敲回车
        POST 请求有哪些：
            ①、form 标签 method=post

3、响应的 HTTP 协议格式
    ①、响应行
        (1) 响应的协议和版本号
        (2) 响应状态码
        (3) 响应状态描述符
    ②、响应头
        (1) key : value 不同的响应头，有其不同含义
    “空行”
    ③、响应体 ---->>> 就是回传给客户端的数据

4、常用的响应码说明
    200 表示请求成功
    302 表示请求重定向
    404 表示请求服务器已经收到了，但是你要的数据不存在（请求地址错误）
    500 表示服务器已经收到请求，但是服务器内部错误（代码错误）

5、MIME 类型说明
    MIME 是 HTTP 协议中数据类型。
    MIME 的英文全称是"Multipurpose Internet Mail Extensions" 多功能 Internet 邮件扩充服务。
    MIME 类型的格式是“大类型/小类型”，并与某一种文件的扩展名相对应。

    常见的 MIME 类型：
        超文本标记语言文本       .html,.htm     text/html
        普通文本               .txt           text/plain
        GIF 图形              .gif            image/gif
        JPEG 图形             .jpeg,.jpg      image/jpeg

如何在Chrome中查看Http请求和响应，以及详细的知识点，见servlet-1.pdf

六、Servlet及Http续
1、HttpServletRequest 类
    ①HttpServletRequest 类有什么作用？
          每次只要有请求进入 Tomcat 服务器，Tomcat 服务器就会把请求过来的 HTTP 协议信息解析好封装到 Request 对象中。
        然后传递到 service 方法（doGet 和 doPost）中给我们使用。我们可以通过 HttpServletRequest 对象，获取到所有请求的
        信息。
    ②HttpServletRequest 类的常用方法
        i.  getRequestURI()     获取请求的资源路径
        ii. getRequestURL()     获取请求的统一资源定位符（绝对路径）
        iii. getRemoteHost()    获取客户端的 ip 地址
        iv.  getHeader()        获取请求头
        v.   getParameter()     获取请求的参数
        vi.  getParameterValues()   获取请求的参数（多个值的时候使用，比如多选框）
        vii. getMethod()            获取请求的方式 GET 或 POST
        viii. setAttribute(key, value); 设置域数据
        ix.   getAttribute(key);        获取域数据
        x.    getRequestDispatcher()    获取请求转发对象

    ③请求中中文乱码的解决：
          getParameter()及getParameterValues()，接收从浏览器获取的参数，中间存在字符集的转换问题
        且GET请求和POST请求的解决方式不同，主要还是取决于两者通过http协议的传输方式不同
            1、GET请求：在传输过程中以iso8859-1进行编码，读取时需要用utf-8解码
                参数名 = new String(参数名.getBytes("iso-8859-1"), "UTF-8");
                实测这段代码不可以加，总结就是GET请求不需要做字符集的转换
            2、POST请求：传输以二进制流进行，在所有操作之前先执行：
                req.setCharacterEncoding("UTF-8");

    ④请求转发：
        getRequestDispatcher()    获取请求转发对象
            参数：以"/"开头，表示的是当前工程下的web目录
            RequestDispatcher requestDispatcher = req.getRequestDispatcher("/servlet2");
            requestDispatcher.forward(req,resp);
        特点：
            1、浏览器中的地址栏没有变化(使用相对路径进行页面跳转会失败，base标签可以解决，或者写绝对路径)
            2、他们是一次请求
            3、他们共享Request域中的数据
            4、可以转发到WEB-INF目录下，访问到受保护的内容(该目录http请求无法访问，转发可以间接访问)
            5、不可以通过转发访问外部资源

2、web 中 / 斜杠的不同意义
    ①/ 斜杠 如果被浏览器解析，得到的地址是：http://ip:port/       <a href="/">斜杠</a>
    ②/ 斜杠 如果被服务器解析，得到的地址是：http://ip:port/工程路径
     1)、<url-pattern>/servlet1</url-pattern>
     2)、servletContext.getRealPath(“/”);
     3)、request.getRequestDispatcher(“/”);
     特殊情况： response.sendRediect(“/”); 把斜杠发送给浏览器解析。得到 http://ip:port/

3、HttpServletResponse 类
    ①HttpServletResponse 类的作用
        HttpServletResponse 类和 HttpServletRequest 类一样。每次请求进来，Tomcat 服务器都会创建一个 Response 对象传
        递给 Servlet 程序去使用。HttpServletRequest 表示请求过来的信息，HttpServletResponse 表示所有响应的信息，
        我们如果需要设置返回给客户端的信息，都可以通过 HttpServletResponse 对象来进行设置
    ②两个输出流的说明
        字节流 getOutputStream(); 常用于下载（传递二进制数据）
        字符流 getWriter(); 常用于回传字符串（常用）,内容写在目标网页的源码里(其实是先写在response的缓冲区中)
        注：两个流同时只能使用一个。
        使用了字节流，就不能再使用字符流，反之亦然，否则就会报错。
    ③响应中文乱码的解决：
        在servlet最前面声明：
        resp.setContentType("text/html; charset=UTF-8");
        即可同时设置客户端和服务器的字符集为utf-8
    ④响应的重定向
          请求重定向，是指客户端给服务器发请求，然后服务器告诉客户端说。我给你一些地址。你去新地址访问。叫请求
        重定向（因为之前的地址可能已经被废弃）。
        用法：
            resp.sendRedirect("/新的servlet程序");没有返回值。
        特点：
        1、浏览器地址栏会发生变化
        2、是两次http请求
        3、不能共享Request域中的数据
        4、不能访问WEB-INF下的资源(因为是第二次http发出的请求)
        5、可以访问外部资源(相当于第二次Http请求外部资源)


七、JSP
1. 什么是 jsp ，它有什么用?
    jsp 的全称是 java server pages。Java 的服务器页面。
    jsp 的主要作用是代替 Servlet 程序回传 html 页面的数据。
    因为 Servlet 程序回传 html 页面数据是一件非常繁锁的事情。开发成本和维护成本都极高。

2、如何使用servlet和jsp回传页面
    ①servlet：
        使用HttpServletResponse对象的输出流Writer对象，调用write方法，写入
        response缓冲区，进而写入html源代码
    ②jsp：
        直接将html页面写入jsp页面即可

3、jsp 如何访问：
    jsp 页面和 html 页面一样，都是存放在 web 目录下。访问也跟访问 html 页面一样。
    但是访问的底层实现不同。

4、jsp  的本质是什么。
      ①我们跟踪原代码发现，HttpJspBase 类。它直接地继承了 HttpServlet 类。也就是说。jsp 翻译出来的 java 类，它间接了继
      承了 HttpServlet 类。也就是说，翻译出来的是一个 Servlet 程序
      jsp 页面本质上是一个 Servlet 程序。
      ②当我们第一次访问 jsp 页面的时候。Tomcat 服务器会帮我们把 jsp 页面翻译成为一个 java 源文件。并且对它进行编译成
      为.class 字节码程序。我们打开 java 源文件不难发现其里面的内容也是通过write方法写入到html页面的。
      流程：编写jsp页面-->服务器启动-->jsp被翻译成servlet-->写入html页面
      ③总结：通过翻译的 java 源代码我们就可以得到结果：jsp 就是 Servlet 程序。

5、jsp 的三种语法
    ①jsp  头部的 page 指令
        jsp 的 page 指令可以修改 jsp 页面中一些重要的属性，或者行为。
        <%@ page contentType="text/html;charset=UTF-8" language="java" %>
        i. language 属性 表示 jsp 翻译后是什么语言文件。暂时只支持 java。
        ii. contentType 属性 表示 jsp 返回的数据类型是什么。也是源码中 response.setContentType()参数值
        iii. pageEncoding 属性 表示当前 jsp 页面文件本身的字符集。
        iv. import 属性 跟 java 源代码中一样。用于导包，导类。
        ========================两个属性是给 out 输出流使用=============================
        v. autoFlush 属性 设置当 out 输出流缓冲区满了之后，是否自动刷新冲级区。默认值是 true。
        vi. buffer 属性 设置 out 缓冲区的大小。默认是 8kb
        ========================两个属性是给 out 输出流使用=============================
        vii. errorPage 属性 设置当 jsp 页面运行时出错，自动跳转去的错误页面路径。
        viii. isErrorPage 属性 设置当前 jsp 页面是否是错误信息页面。默认是 false。如果是 true 可以
        获取异常信息。
        ix. session 属性 设置访问当前 jsp 页面，是否会创建 HttpSession 对象。默认是 true。
        x. extends 属性 设置 jsp 翻译出来的 java 类默认继承谁。

    ②jsp 中的常用脚本
        i.声明脚本( 极少使用)
            声明脚本的格式是： <%! 声明 java 代码 %>
            作用：可以给 jsp 翻译出来的 java 类定义属性和方法甚至是静态代码块。内部类等。
        ii.表达式脚本 （常用）
            表达式脚本的格式是：<%=表达式%>
            表达式脚本的作用是：的 jsp 页面上输出数据。
            表达式脚本的特点：
            1、所有的表达式脚本都会被翻译到_jspService() 方法中
            2、表达式脚本都会被翻译成为 out.print()输出到页面上
            3、由于表达式脚本翻译的内容都在_jspService() 方法中,所以_jspService()方法中的对象都可以直接使用。
            4、表达式脚本中的表达式不能以分号结束。
        iii.代码脚本
            代码脚本的格式是：
            <% java 语句 %>
            代码脚本的作用是：可以在 jsp 页面中，编写我们自己需要的功能（写的是 java 语句）。
            代码脚本的特点是：
            1、代码脚本翻译之后都在_jspService 方法中
            2、代码脚本由于翻译到_jspService()方法中，所以在_jspService()方法中的现有对象都可以直接使用。
            3、还可以由多个代码脚本块组合完成一个完整的 java 语句。
            4、代码脚本还可以和表达式脚本一起组合使用，在 jsp 页面上输出数据

6、jsp 中的三种注释
    ① html注释
        <!-- 这是 html 注释 -->
        html 注释会被翻译到 java 源代码中。在_jspService 方法里，以 out.writer 输出到客户端。
    ②java注释
        java 注释会被翻译到 java 源代码中。
        <%
        // 单行 java 注释
        /* 多行 java 注释 */
        %>
    ③jsp注释
        <%-- 这是 jsp 注释 --%>
        jsp 注释可以注掉，jsp 页面中所有代码。

7、jsp九大内置对象
    ①request            请求对象
    ②response           响应对象
    ③pageContext        jsp上下文对象
    ④session            会话对象
    ⑤application        servletContext对象
    ⑥config             servletConfig对象
    ⑦out                jsp输出流对象
    ⑧page               指向当前jsp对象
    ⑨exception          异常对象

8、jsp四大域对象
    四个域对象分别是：
    ①pageContext (PageContextImpl 类) 当前 jsp 页面范围内有效
    ②request (HttpServletRequest 类)、 一次请求内有效
    ③session (HttpSession 类)、 一个会话范围内有效（打开浏览器访问服务器，直到关闭浏览器）
    ④application (ServletContext 类) 整个 web 工程范围内都有效（只要 web 工程不停止，数据都在）

    域对象是可以像 Map 一样存取数据的对象。四个域对象功能一样。不同的是它们对数据的存取范围。
    虽然四个域对象都可以存取数据。在使用上它们是有优先顺序的。
    四个域在使用的时候，优先顺序分别是，他们从小到大的范围的顺序。
    pageContext ====>>> request ====>>> session ====>>> application

9、jsp中的out输出和response.getWriter输出的区别
    jsp内置对象out并不是简单的响应输出流对象，而是继承自响应输出流对象Writer
    结论：无论response.getWriter和out的书写先后顺序，由于底层实现，都是response的内容先输出
    out.write() 输出字符串没有问题
    out.print() 输出任意数据都没有问题（都转换成为字符串后调用的 write 输出）
    深入源码，浅出结论：在 jsp 页面中，可以统一使用 out.print()来进行输出

10、jsp常用标签
    ①jsp 静态包含
        示例说明：
        <%@ include file=""%> 就是静态包含
        file 属性指定你要包含的 jsp 页面的路径
        地址中第一个斜杠 / 表示为 http://ip:port/ 工程路径 / 映射到代码的 web 目录
        静态包含的特点：
            1 、静态包含不会翻译被包含的 jsp 页面。
            2 、静态包含其实是把被包含的 jsp 页面的代码拷贝到包含的位置执行输出。
        <%@ include file="/include/footer.jsp"%>
    ②jsp 动态包含 动态包含
        示例说明：
        <jsp:include page=""></jsp:include> 这是动态包含
        page 属性是指定你要包含的 jsp 页面的路径
        动态包含也可以像静态包含一样。把被包含的内容执行输出到包含位置
        动态包含的特点：
            1 、动态包含会把包含的 jsp 页面也翻译成为 java 代码
            2 、动态包含底层代码使用如下代码去调用被包含的 jsp 页面执行输出。
        JspRuntimeLibrary.include(request, response, "/include/footer.jsp", out, false);
        3 、动态包含，还可以传递参数
        <jsp:include page="/include/footer.jsp">
        <jsp:param name="username" value="bbj"/>
        <jsp:param name="password" value="root"/>
        </jsp:include>
    ③jsp  标签-转发 转发
        示例说明：
        <jsp:forward page=""></jsp:forward> 是请求转发标签，它的功能就是请求转发
        page 属性设置请求转发的路径
        <jsp:forward page="/scope2.jsp"></jsp:forward>

八、监听器Listener
1、什么是 Listener  监听器？
    ①Listener 监听器它是 JavaWeb 的三大组件之一。JavaWeb 的三大组件分别是：Servlet 程序、Filter 过滤器、Listener 监
    听器。
    ②Listener 它是 JavaEE 的规范，就是接口
    ③监听器的作用是，监听某种事物的变化。然后通过回调函数，反馈给客户（程序）去做一些相应的处理
2、ServletContextListener 监听器
    ServletContextListener 它可以监听 ServletContext 对象的创建和销毁。
    ServletContext 对象在 web 工程启动的时候创建，在 web 工程停止的时候销毁。
    监听到创建和销毁之后都会分别调用 ServletContextListener 监听器的方法反馈。
    两个方法分别是：
    public interface ServletContextListener extends EventListener {
    //在 ServletContext 对象创建之后马上调用，做初始化
    public void contextInitialized(ServletContextEvent sce);
    //在 ServletContext 对象销毁之后调用
    public void contextDestroyed(ServletContextEvent sce);

3.web.xml 中的配置：
      <!-- 配置监听器 -->
      <listener>
      <listener-class>com.atguigu.listener.MyServletContextListenerImpl</listener-class>
      </listener>

八、EL表达式及JSTL标签库
    属于对jsp功能的封装，详见课件。


九、文件的上传和下载
    1、文件的上传
        指客户端通过from表单，传数据给服务器
        步骤：
            ①、要有一个 form 标签，method=post 请求
            ②、form 标签的 encType 属性值必须为 multipart/form-data 值
            ③、在 form 标签中使用 input type=file 添加上传的文件
            ④、编写服务器代码（Servlet 程序）接收，处理上传的数据。
            encType=multipart/form-data 表示提交的数据，以多段（每一个表单项一个数据段）的形式进行拼
            接，然后以二进制流的形式发送给服务器
        主要的编程部分在④---->在服务器端编写servlet处理传输进来的数据

    2、Servlet的编写：
    编写Servlet所需要的功能已有现成的第三方封装，需要导入两个jar
        ①commons-fileupload-1.2.1.jar
        ②commons-io-1.4.jar

        ①commons-fileupload.jar  常用 API 介绍说明
            ServletFileUpload 类，用于解析上传的数据。
            FileItem 类，表示每一个表单项。

            i、boolean ServletFileUpload.isMultipartContent(HttpServletRequest request);
                判断当前上传的数据格式是否是多段的格式。

            ii、public List<FileItem> parseRequest(HttpServletRequest request)
                解析上传的数据

            iii、boolean FileItem.isFormField()
                判断当前这个表单项，是否是普通的表单项。还是上传的文件类型。
                true 表示普通类型的表单项
                false 表示上传的文件类型

            iv、String FileItem.getFieldName()
                获取表单项的 name 属性值

            v、String FileItem.getString()
                获取当前表单项的值。

            vi、String FileItem.getName();
                获取上传的文件名

            vii、void FileItem.write( file );
                将上传的文件写到 参数 file 所指向抽硬盘位置 。

    3、文件的下载：
        指客户端从服务器端下载文件
        下载的常用 API  说明：
            response.getOutputStream();
            servletContext.getResourceAsStream();
            servletContext.getMimeType();
            response.setContentType();
        此外还存在，中文在Http协议中传输的乱码问题、浏览器的兼容问题
        代码pdf中没有给，写在Idea中，乱码的解决方式在pdf中

十、Cookie
    1、什么是Cookie？
        ①Cookie 翻译过来是饼干的意思。
        ②Cookie 是服务器通知客户端保存键值对的一种技术。
        ③客户端有了 Cookie 后，每次请求都发送给服务器。
        ④每个 Cookie 的大小不能超过 4kb
    2、如何创建Cookie，并让客户端保存？
        当客户端访问服务器中某个servlet时，servlet中声明了如下语句：
            Cookie cookie=new Cookie("key","value");//创建Cookie对象
            response.addCookie(cookie);//通过响应通知客户端保存Cookie
        则说明Cookie创建成功。
    3、服务器如何获取客户端保存的Cookie？
        只需要在对应servlet程序中声明：
            Cookie[] cookies=req.getCookies();//通过响应获取Cookie对象数组
        即可得到Cookie对象数组
    4、Cookie的值如何修改？
        方案一：
            1、先创建一个要修改的同名（指的就是 key）的 Cookie 对象
            2、在构造器，同时赋于新的 Cookie 值。
            3、调用 response.addCookie( Cookie );
        方案二：
            1、先查找到需要修改的 Cookie 对象
            2、调用 setValue()方法赋于新的 Cookie 值。
            3、调用 response.addCookie()通知客户端保存修改

    5、什么是Cookie的生命控制？
        定义：
            Cookie 的生命控制指的是如何管理 Cookie 什么时候被销毁（删除）
        主要方法：
            Cookie对象.setMaxAge();
            正数，表示在指定的秒数后过期------>若正数设置的比较大，浏览器关闭时，下次再打开也会存在
            负数，表示浏览器一关，Cookie 就会被删除（默认值是-1）
            零，表示马上删除 Cookie

    6、Cookie的path属性
        Cookie 的 path 属性可以有效的过滤哪些 Cookie 可以发送给服务器。哪些不发。path 属性是通过请求的地址来进行有效的过滤。
        应用：
            CookieA path=/工程路径
            CookieB path=/工程路径/abc
            请求地址如下：
                ①http://ip:port/工程路径/a.html
                    CookieA 发送
                    CookieB 不发送
                ②http://ip:port/工程路径/abc/a.html
                    CookieA 发送
                    CookieB 发送
             请求地址是Cookie的path属性的子集时才会发送。
         主要方法：
         setPath();
    7、Cookie的应用
        当客户端访问过某个资源时，让客户端保存下Cookie，这样，二次访问时，服务器通过响应头就可以知道，
        该客户端之前访问过服务器，可以实现免账号或者免密登录。

十一、Session
    1、什么是Session？
        ①Session 就一个接口（HttpSession）。
        ②Session 就是会话。它是用来维护一个客户端和服务器之间关联的一种技术。
        ③每个客户端都有自己的一个 Session 会话。(使用Cookie保存，在发起请求时通过响应头通知服务器)
        ④Session 会话中，我们经常用来保存用户登录之后的信息。
    2、如何创建Session？
        涉及API：
            1)request.getSession()
                ①第一次调用是：创建 Session 会话
                ②之后调用都是：获取前面创建好的 Session 会话对象。
            2)isNew();
                判断到底是不是刚创建出来的（新的）
                true 表示刚创建
                false 表示获取之前创建
            3)getId()
                得到 Session 的会话 id 值
                每个会话都有一个身份证号。也就是 ID 值。而且这个 ID 是唯一的。

    3、Session域中的数据存取：
        ①向Session域中存数据：
            Session对象.setAttribute("key", "value");//必须都是String类型的键值对
        ②取Session域中的数据：
            Session对象.getAttribute("key");//返回值类型为String类型

    4、Session的生命控制
        1)相关API：
            ①public void setMaxInactiveInterval(int interval);
                设置 Session 的超时时间（以秒为单位），超过指定的时长，Session就会被销毁。
                参数值：
                    正数的时候，设定 Session 的超时时长。
                    负数表示永不超时（极少使用）
            ②public int getMaxInactiveInterval()
                获取 Session 的超时时间
            ③public void invalidate()
                让当前 Session 会话马上超时无效。
        2)Session对象的默认生命时长：
            Session 默认的超时时间长为 30 分钟。
            因为在Tomcat服务器的配置文件web.xml中默认有以下的配置，它就表示配置了当前Tomcat服务器下所有的Session
            超时配置默认时长为：30 分钟。
            <session-config>
            <session-timeout>30</session-timeout>
            </session-config>
        3)修改Session的默认生命时长
            方式一：
                在当前工程的web目录下的web.xml文件中配置默认时长，作用于该web工程下所有的资源。
                声明格式如下：
                    <session-config>
                    <session-timeout>20</session-timeout>
                    </session-config>
            方式二：
                session.setMaxInactiveInterval(int interval)
                单独设置超时时长，仅作用于当前Session对象。

    5、Session超时的概念：
            指客户端两次发起请求访问Session对象的间隔超过了Session对象的生命时长。
    6、Session与浏览器之间的技术内幕
            Session 技术，底层其实是基于 Cookie 技术来实现的！
            模拟浏览器和服务器之间的交互：
                ①当浏览器第一次访问服务器时，服务器的req.getSession方法发现请求头中的Cookie中没有Session信息，就会创建Session对象
                并保存到服务器的内存中。然后通过响应通知浏览器保存一个Cookie对象key="JSESSIONID",vaklue=Session对象的ID。
                ②当浏览器再次访问服务器时，请求头会带着已经保存的Cookie对象，此时req.getSession方法会根据ID到服务器内存中查找对应的
                Session对象。
                ③若是手动的在浏览器删除保存Session信息的Cookie，则会重复①②步骤....

    7、Session的应用
        存储会话信息供浏览器后续请求使用，可以获取并修改变量的值。和cookie一起使用识别同一个客户。
    8、Cookie和Session的区别和联系：
        ①Cookie机制采用的是在客户端保持状态的方案，而Session机制采用的是在服务器端保持状态的方案。
        ②Cookie对象保存在浏览器中，通过请求头传递给服务器，服务器可以得到相应的键值对。
        ③Session对象保存在服务器内存中，真正要操作Session对象需要得要SessioinID，定位到该对象。

十二、Filter
    1、什么是Filter？
        ①Filter 过滤器它是 JavaWeb 的三大组件之一。三大组件分别是：Servlet 程序、Listener 监听器、Filter 过滤器
        ②Filter 过滤器它是 JavaEE 的规范。也就是接口
        ③Filter 过滤器它的作用是： 拦截请求，过滤响应。
    2、常见的拦截场景？
        ①权限检查
        ②日记操作
        ③事务管理  ……等等

    3、Filter的使用？
        ①编写一个类去实现 Filter 接口
        ②实现过滤方法 doFilter()
        ③到 web.xml 中去配置 Filter 的拦截路径
    4、关于doFilter方法
        doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)
        编写步骤：
            ①需要将servletRequest类型转化为HttpServletRequest
            ②进行条件判断：
                满足条件进行请求转发或者重定向(放行)
                不满足条件，执行filterChain的同名方法doFilter(servletRequest,servletResponse)。
        FilterChain对象的doFilter方法：
            ①按照web.xml中的Filter配置信息，执行下一个FiIter过滤器(如果有Filter)
            ②执行目标资源(没有Filter)
            ③当访问到尽头时，无论是否成功，都会原路返回，依次执行doFilter方法下的代码，这也是异常捕获要放到filterChain.doFilter之后的原因。
            ④所有filter和目标资源默认都执行在同一个线程中
            ⑤多个Filter共同执行的时候，它们都使用同一个Request对象。


    5、web.xml中的配置
        示例：
            <filter>
                <filter-name>AdminFilter</filter-name>
                <filter-class>com.atguigu.filter.AdminFilter</filter-class>
            </filter>
            <filter-mapping>
                <filter-name>AdminFilter</filter-name>
                <url-pattern>/admin/*</url-pattern>
                <url-pattern>*.html</url-pattern>
            </filter-mapping>

        匹配模式：
        --精确匹配          /target.jsp
            以上配置的路径，表示请求地址必须为：http://ip:port/工程路径/target.jsp
        --目录匹配          /admin/*
            以上配置的路径，表示请求地址必须为：http://ip:port/工程路径/admin/*
        --后缀名匹配         *.html
            以上配置的路径，表示请求地址必须以.html 结尾才会拦截到
        注： ①<url-pattern>标签可以写多个。
            ②只有后缀名匹配不是以斜线打头的。
            ③Filter 过滤器它只关心请求的地址是否匹配，不关心请求的资源是否存在。

    6、Filter的生命周期：
            ①构造器方法
            ②init 初始化方法
            ③doFilter 过滤方法
            ④destroy 销毁
                第 1，2 步，在 web 工程启动的时候执行（Filter 已经创建）
                第 3 步，每次拦截到请求，就会执行
                第 4 步，停止 web 工程的时候，就会执行（停止 web 工程，也会销毁 Filter 过滤器）

    7、FilterConfig类
        FilterConfig 类见名知义，它是 Filter 过滤器的配置文件类。
        Tomcat 每次创建 Filter 的时候，也会同时创建一个 FilterConfig 类，这里包含了 Filter 配置文件的配置信息。
        FilterConfig 类的作用是获取 filter 过滤器的配置内容：
            ①获取 Filter 的名称 filter-name 的内容
            ②获取在 Filter 中配置的 init-param 初始化参数
            ③获取 ServletContext 对象










        实际敲代码发现的问题：
        1、webapp没有蓝点
            Project Structure ->Modules ->选中当前工程 ->点击"+"，加入Web并选中
             ->在 Web Resource Directory中选中目标工程的web.xml文件
        2、配置文件位置
            在Maven中，例如jdbc.properties等配置文件，不再放到src目录下
            而是放到resources目录下
        3、浏览器清空缓存
            快捷键：shift+ctrl+del
        4、查看自己的ip地址
            Windows下：ipconfig指令
            Linux下：ifconfig指令
        5、如何创建lib
            Project Structure -> Libraries ->点击"+"，创建新的Lib(选择目标Lib，并命名) -> Modules ->
            选中目标Modules -》Dependencies -》添加Lib依赖
        6、绝对路径和base+相对路径还真就得二选一，主要是由于请求转发造成的
            比如说注册不成功还需要转发到当前页面(但是地址栏是Servlet程序)，若是没有二选一，相对路径失效

        7、js本地验证的精髓是return false，防止页面跳转，不再先发送到服务器，而是进行本地验证

        8、jsp静态引用时，被引用页面只需写需要引用的代码即可，视为拼接。
        9、web运行报错 illegal to have multiple occurrences of contentType with different
                    values (old: text/html; charset=UTF-8, new: text/html; charset=utf-8)
           原因是jsp静态引用时，两个页面的page指令不一致，这里是因为contentType="text/html;和charset=utf-8"之间多了一个空格

           写每个模块的步骤：①写数据库中的表 ②写JavaBean ③写Dao(BaseDao+DaoInterface)->测试
           ④写Service，并测试 ⑤写Servlet，配置监听，并测试
        10、请求转发和请求重定向的路径区别：
            ①请求转发的第一个"/"表示到工程名，映射到Web目录下
            ②请求重定向的第一个"/"表示道端口名
            所以请求重定向要在"/"前加上req.getContextPath(),才能映射到web目录下
        11、实践过程中若出现乱码问题，在本页面搜索字符集，按照doPost和doGet请求的解决方式分别解决即可
        12、a标签若是绑定servlet程序，点击默认调用doGet方法，且可以省略name和value属性
            直接在href属性中写Servlet程序地址再加上参数"?action=...&属性名=属性值...";
        13、req.getRequestDispatcher("参数")中的字符串参数可以用"/"代替当前工程,
            resp.sendRedirect(“参数”)中的字符串参数没有此类功能，需要使用req.getContextPath()+"/"
        14、目前的工程都是基于JavaEE8的，即Servlet使用的是javax包，而不是Jakarta包
            若创建工程时选用了JavaEE9，则会默认导入Jakarta包，会报错
        15、关于数据库事务性的代码，不要进行完全捕获，最后统一交给过滤器进行处理。
        16、Filter的实现类中不仅要实现doFilter方法，还要实现init和destory方法，且后两个方法必须空实现，否则war包打包出错。

