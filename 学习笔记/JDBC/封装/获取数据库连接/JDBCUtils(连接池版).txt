1、导入德鲁伊数据库连接池jar包
    druid-版本号.jar

public class JdbcUtils {
    private static DruidDataSource dataSource;
    private static ThreadLocal<Connection> conns=new ThreadLocal<>();

    //静态代码块的作用是：在加载JdbcUtils类时，就登录数据库，创建好数据库连接池
    static{
        try {
            Properties properties = new Properties();
            // 读取jdbc.properties属性配置文件
            InputStream inputStream = JdbcUtils.class.getClassLoader().getResourceAsStream("jdbc.properties");
            //从流中加载数据
            properties.load(inputStream);
            // 创建 数据库连接池
            dataSource= (DruidDataSource) DruidDataSourceFactory.createDataSource(properties);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }


    /**
     * 获取数据库连接池中的连接
     * @return 如果返回null,说明获取连接失败<br/>有值就是获取连接成功
     */
    public static Connection getConnection(){
        Connection conn=conns.get();
        try {
            if (conn == null) {
                conn=dataSource.getConnection();
                conns.set(conn);
                conn.setAutoCommit(false);
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }

        return conn;
    }

    /**
     * 提交事务，释放连接
     */
    public static void commitAndClose(){
        Connection connection=conns.get();
        if(connection!=null){
            try {
                connection.commit();
            } catch (SQLException e) {
                e.printStackTrace();
            } finally {
                try {
                    connection.close();
                }  catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
        //一定执行ThreadLocal对象的remove方法，否则报错
        conns.remove();
    }
    /**
     * 回滚事务，并关闭释放连接
     */
    public static void rollbackAndClose(){
        Connection connection = conns.get();
        if (connection != null) { // 如果不等于null，说明 之前使用过连接，操作过数据库
            try {
                connection.rollback();//回滚事务
            } catch (SQLException e) {
                e.printStackTrace();
            } finally {
                try {
                    connection.close(); // 关闭连接，资源资源
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
        // 一定要执行remove操作，否则就会出错。（因为Tomcat服务器底层使用了线程池技术）
        conns.remove();
    }
}