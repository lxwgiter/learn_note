
！！！！需要DBUtils的支持！！！！
！！！！这里对jdbc课程中的代码进行了修改，把Connection对象的获取只放在BaseDAO中，避免参数的层层传递！！！！！！
！！！！同时也可以对连接进行统一管理，如通过JDBCUtils类中ThreadLocal类，确保是同一连接！！！！！！！！！
！！！！在所有异常在实现类中均不做捕获，而是在BaseDAO中捕获，并且不可以完全解决异常，要继续上抛，确保事务的原子性！！！！！
public abstract class BaseDao<T> {
    private QueryRunner queryRunner = new QueryRunner();
    // 定义一个变量来接收泛型的类型
    private Class<T> type;
    // 获取T的Class对象，获取泛型的类型，泛型是在被子类继承时才确定
    public BaseDao() {
        // 获取子类的类型
        Class clazz = this.getClass();
        // 获取父类的类型
        // getGenericSuperclass()用来获取当前类的父类的类型
        // ParameterizedType表示的是带泛型的类型
        ParameterizedType parameterizedType = (ParameterizedType)clazz.getGenericSuperclass();
        // 获取具体的泛型类型 getActualTypeArguments获取具体的泛型的类型
        // 这个方法会返回一个Type的数组
        Type[] types = parameterizedType.getActualTypeArguments();
        // 获取具体的泛型的类型·
        this.type = (Class<T>) types[0];
    }

        /**
        * 通用的增删改操作
        *
        * @param sql
        * @param params
        * @return
        */
    public int update(String sql, Object... params) {
        Connection conn = JdbcUtils.getConnection();
        int count = 0;
        try {
            count = queryRunner.update(conn, sql, params);
        } catch (SQLException e) {
            e.printStackTrace();
            throw new RuntimeException(e);
        }
        return count;
    }

        /**
        * 获取一个对象
        *
        * @param sql
        * @param params
        * @return
        */
    public T getBean(String sql, Object... params) {
        Connection conn = JdbcUtils.getConnection();
        T t = null;
        try {
            t = queryRunner.query(conn, sql, new BeanHandler<T>(type), params);
        } catch (SQLException e) {
            e.printStackTrace();
            throw new RuntimeException(e);
        }
        return t;
    }

        /**
        * 获取所有对象
        *
        * @param sql
        * @param params
        * @return
        */
    public List<T> getBeanList(String sql, Object... params) {
        Connection conn = JdbcUtils.getConnection();
        List<T> list = null;
        try {
            list = queryRunner.query(conn, sql, new BeanListHandler<T>(type),params);
        } catch (SQLException e) {
            e.printStackTrace();
            throw new RuntimeException(e);
        }
        return list;
    }

        /**
        * 获取一个但一值得方法，专门用来执行像 select count(*)...这样的sql语句
        *
        * @param sql
        * @param params
        * @return
        */
    public Object getValue(String sql, Object... params) {
        Connection conn = JdbcUtils.getConnection();
        Object count = null;
        try {
            // 调用queryRunner的query方法获取一个单一的值
            count = queryRunner.query(conn, sql, new ScalarHandler<>(), params);
        } catch (SQLException e) {
            e.printStackTrace();
            throw new RuntimeException(e);
        }
        return count;
    }
}