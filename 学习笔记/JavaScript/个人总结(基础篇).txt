JavaScript面向对象和Java、C++面向对象的区别：
     一、首先可以确定JS中没有多态性，也没有权限修饰符。
     二、JS中可以不通过设计类去new对象，new Objecr()即是一个对象，增加属性直接写属性名然后赋值即可，并且可以通过
            delete操作符删除属性。读取不存在的属性也不会报错(返回undefined),读取不存在的变量会报错。
     三、JS中也有堆栈、引用数据类型的概念，局部变量放在栈中，对象放在堆内存中。与java是一致的。
     四、JS中函数也是对象，最直接的体现是函数的创建方式之一：var fun=new Function("函数体");
     五、在JS参数列表中声明的参数并不是全局的，作用域为函数体。for循环中“var i”是全局的。


	七、JS中没有类的概念，那么在JS中如何设计"类"呢？
		首先JS中的类时通过构造函数实现的，构造函数本身也是一个普通的函数对象，但是通过new运算符调用，能实现构造函数
		的效果，在构造函数中设置属性和方法，就如同设计类一样，都需通过new调用也基本实现了"类"的概念，需要注意的是：
		构造函数中方法一般不在构造函数中声明，不然会存在多份备份，也不会声明为window对象的方法，这样污染了全局作用域
		一般声明在该类的原型中，所谓原型也是对象，该类所有对象共同指向同一个原型，相当于存放静态属性和方法的空间
		第17条是关于构造函数的说明和补充

	八、JS中的继承和静态是通过原型对象实现的，一个类中所有对象公用一个原型函数、Object通过原型对象的方式，把方法传递给子类
	九、JS中重写也是通过原型对象实现的，比如说toStrong方法，原本定义在Object类中(实例化后作为原型对象)，只需在自定义类的原型对象
		中添加toString方法就实现了方法的重写

	十、JS中也存在自动的垃圾回收机制，判定方式和java是相同的，人为不能准确的控制，并且不同浏览器的GC机制稍有区别


1、JS数据类型和Java等不同，属于弱数据类型语言，其他基础语法基本相同(循环、流程控制)
2、JS函数：
			alert("hello");警告框
			document.write("hello");重新打开一个文档流，向body中输出内容
			console.log("hello"); 该语句用来在控制台输出一个日志
			toString()返回某对象的字符串类型
			Number(参数)将某种数据类型转换为Number类型
			parseInt() 把一个字符串转换为一个整数
			parseFloat() 把一个字符串转换为一个浮点数
			Boolean()函数将其他的数据类型转换为Boolean
			prompt("提示信息")可以弹出一个提示框，该提示框中会带有一个文本框，用于用户输入
			console.time("计时器的名字")可以用来开启一个计时器
			console.timeEnd()用来停止一个计时器，需要一个计时器的名字作为参数
			Math.sqrt();
			hasOwnProperty("属性名")来检查对象自身中是否含有该属性(不包括原型对象)，该函数声明在原型对象Object中,返回结果为true或者false

3、 * 删除对象的属性
		 * 语法：delete 对象.属性名

4、* in 运算符
		 ①通过该运算符可以检查一个对象中是否含有指定的属性
		 * 		如果有则返回true，没有则返回false
		 *  - 语法：
		 * 		"属性名" in 对象
		 ②通过in运算符可以遍历数组或对象的属性名、属性值
		 for (i in 对象名/数组名){
			数组名[i]/对象名[i]
		 }

5、 * 如果要使用特殊的属性名，不能采用.的方式来操作
		 * 	需要使用另一种方式：
		 * 		语法：对象["属性名"] = 属性值
		 * 	读取时也需要采用这种方式
		 * 
		 * 使用[]这种形式去操作属性，更加的灵活，
		 * 	在[]中可以直接传递一个变量，这样变量值是多少就会读取那个属性

6、 * 对象的分类：
		 * 	1.内建对象
		 * 		- 由ES标准中定义的对象，在任何的ES的实现中都可以使用
		 * 		- 比如：Math String Number Boolean Function Object....
		 * 
		 * 	2.宿主对象
		 * 		- 由JS的运行环境提供的对象，目前来讲主要指由浏览器提供的对象
		 * 		- 比如 BOM DOM
		 * 
		 * 	3.自定义对象
		 * 		- 由开发人员自己创建的对象

7、使用字面量创建对象：
		 * 使用对象字面量，可以在创建对象时，直接指定对象中的属性
		 * 语法：{属性名:属性值,属性名:属性值....}
		 * 	对象字面量的属性名可以加引号也可以不加，建议不加,
		 * 	如果要使用一些特殊的名字，则必须加引号
		 * 
		 * 属性名和属性值是一组一组的名值对结构，
		 * 	名和值之间使用:连接，多个名值对之间使用,隔开
		 * 	如果一个属性之后没有其他的属性了，就不要写,

8、 * 函数 function
		 * 	- 函数也是一个对象
		 * 	- 使用typeof检查一个函数对象时，会返回function
		 *函数的三种创建方式：
		 *①：var fun = new Function("console.log('Hello 这是我的第一个函数');");几乎不用
		 *②		function 函数名([形参1,形参2...形参N]){
		 * 			语句...
		 * 		}
		 *③ var 函数名  = function([形参1,形参2...形参N]){
		 * 	 语句....
		 *  }；(注意方式③是一条赋值语句，对象的赋值是合情合理的，这里属于匿名对象的赋值！)

9、 *JS函数不会进行参数类型和参数个数检查，理论上不存在函数重载	function sum(a,b){}
		 *针对上面定义的sum函数，任何类型的参数都可以被传入，具体的返回值要视参数类型而定
		 * 调用函数时，解析器也不会检查实参的数量
		 * 	多余实参不会被赋值
		 * 如果实参的数量少于形参的数量，则没有对应实参的形参将是undefined
		 *函数也是对象，那么函数也可以作参数，比如说fun1(fun2)。fun2是函数名，注意不要写成fun2()
		 *那样的话相当于参数是fun2的执行结果

10、 *关于JS函数返回值，首先，函数的返回值不需要声明，直接在函数体内书写即可
		 * 	return后可以跟任意类型的值
		 * 	return；或者return undefined；就相当于返回一个undefined，并结束当前函数调用

11、 *JS函数里可以嵌套定义函数，(在函数里定义对象本身就是合理的)，
		 *所以看到fun()();这种写法时不必惊讶，可能fun()函数的返回值是一个函数对象。

12、 *立即执行函数(IIFE)：本质上就是匿名函数的直接调用
		 *(function(){
		 *	alert("我是一个匿名函数~~~");
		 *})();*/注意匿名函数对象也要用括号括起来

13、 *JS中也有方法，当函数对象作为属性出现时，那么就称为方法，注意：方法和函数并没有本质上的区别

14、//枚举对象中的属性
		//使用for ... in 语句
		 * 语法：
		 * 	for(var 变量 in 对象){
		 *  }
		 * for...in语句 对象中有几个属性，循环体就会执行几次
		 * 	每次执行时，会将对象中的一个属性的名字赋值给变量//变量为字符串类型
		 *常用的操作为：for( var n in obj){   console.log(n+"="+obj[n]);     }

15、 *JS中的作用域：
		 *①：全局作用域
		 * 	- 直接编写在script标签中的JS代码，都在全局作用域
		 * 	- 全局作用域在页面打开时创建，在页面关闭时销毁
		 *	- 在全局作用域中有一个全局对象window，
				它代表的是一个浏览器的窗口，它由浏览器创建我们可以直接使用
		 * 	- 在全局作用域中：
		 * 	创建的变量都会作为window对象的属性保存
		 * 	创建的函数都会作为window对象的方法保存
		 * 	- 全局作用域中的变量都是全局变量，
		 * 		在页面的任意的部分都可以访问的到
		 *② 函数作用域	
		 * 	- 调用函数时创建函数作用域，函数执行完毕以后，函数作用域销毁
		 * 	- 每调用一次函数就会创建一个新的函数作用域，他们之间是互相独立的
		 * 	- 在函数中要访问全局变量可以使用window对象
		 *注：声明变量不带var
		 *	- 若是在函数作用域中声明新变量没有使用var关键字，默认为全局变量即window的属性
		 *  - 带var则意味着确实是局部变量
		 *	- (函数外声明不带var也是一样)，这时就不存在提前声明，程序执行到该语句才会有window.变量=值

16、 *与作用域相关的声明提前：
		 *①：变量声明提前
		 *	- 使用var关键字声明的变量，会在所有的代码执行之前被声明（但是不会赋值）
			- 例如18行有var a=1；语句，相当于在首行声明了var a；在18行声明了a=18；
			- 故console.log(a); var a=10;并不会报错，而是提示undefined
		 *② 函数的声明提前
		 * 	- 使用函数声明形式创建的函数 function 函数(){}
		 * 		它会在所有的代码执行之前就被创建，所以我们可以在函数声明前来调用函数
		 * 	   使用函数表达式创建的函数，不会被声明提前，所以不能在声明前调用	
		 *	  var fun2 = function(){。。。}这种方式创建的函数不会被声明提前，可以和①联系起来思考

17、 * 	构造函数就是一个普通的函数，创建方式和普通函数没有区别,
		 * 	不同的是构造函数习惯上首字母大写
		 * 
		 * 构造函数和普通函数的区别就是调用方式的不同
		 * 	普通函数是直接调用，而构造函数需要使用new关键字来调用
		 * 
		 * 构造函数的执行流程：
		 * 	1.立刻创建一个新的对象
		 * 	2.将新建的对象设置为函数中this,在构造函数中可以使用this来引用新建的对象
		 * 	3.逐行执行函数中的代码
		 * 	4.将新建的对象作为返回值返回
		 * 
		 * 使用同一个构造函数创建的对象，我们称为一类对象，也将一个构造函数称为一个类。
		 * 	我们将通过一个构造函数创建的对象，称为是该类的实例
		 * 
		 * this的情况：
		 * 	1.当以函数的形式调用时，this是window
		 * 	2.当以方法的形式调用时，谁调用方法this就是谁
		 * 	3.当以构造函数的形式调用时，this就是新创建的那个对象
		 *语法：
		function Person(name , age , gender){//Person类的构造函数
			this.name = name;
			this.age = age;
			this.gender = gender;
			//向对象中添加一个方法
			//this.prototype.sayName = fun;//向Person的原型中添加一个方法
		}

18、* 原型 prototype
		* 
		* 	我们所创建的每一个函数，解析器都会向函数中添加一个属性prototype，每一个函数的prototype都是唯一的
		* 		这个属性对应着一个对象，这个对象就是我们所谓的原型对象
		* 	如果函数作为普通函数调用prototype没有任何作用
		* 	当函数以构造函数的形式调用时，它所创建的对象中都会有一个隐含的属性，
		* 		指向该构造函数的原型对象，我们可以通过__proto__属性来访问该属性
		* 
		* 	原型对象就相当于一个公共的区域，所有同一个类的实例都可以访问到这个原型对象，
		* 		我们可以将对象中共有的内容，统一设置到原型对象中。
		* 
		* 当我们访问对象的一个属性或方法时，它会先在对象自身中寻找，如果有则直接使用，
		* 	如果没有则会去原型对象中寻找，如果找到则直接使用
		* 
		* 以后我们创建构造函数时，可以将这些对象共有的属性和方法，统一添加到构造函数的原型对象中，
		* 	这样不用分别为每一个对象添加，也不会影响到全局作用域，就可以使每个对象都具有这些属性和方法了
		*/
		* 原型对象也是对象，所以它也有原型，
		* 	当我们使用一个对象的属性或方法时，会现在自身中寻找，
		* 		自身中如果有，则直接使用，
		* 		如果没有则去原型对象中寻找，如果原型对象中有，则使用，
		* 		如果没有则去原型的原型中寻找,直到找到Object对象的原型，
		* 		Object对象的原型没有原型，如果在Object原型中依然没有找到，则返回undefined
		//console.log(mc.__proto__.__proto__.hasOwnProperty("hasOwnProperty"));检查Person对象的hasOwnProperty方法来自哪一层
		*************详见img原型对象1和原型对象2*************************

19、toString方法：
		定义在Object类中，和java是完全相同的
		//当我们直接在页面中打印一个对象时，事件上是输出的对象的toString()方法的返回值
		重写的实现：在原型对象中添加新的toString方法
		
20、数组(Array)
		说明：
		①数组本身也是对象，数组元素也可以存放任意数据类型(可以不一致)，
		自然也可以存放函数对象，若是出现array[1]();不必惊讶，是在调用函数
		②JS数组并没有规定类型，数组中的元素可以是不同类型，且length属性可读可写
		一、实例化方式：
		①new Array();
		②new Array(size);
		③new Array(element0, element1, ..., elementn);
		④var arr = [值1，值2，.....，值n];
		二、数组属性：
		length、prototype、(详见w3cschool手册)
		三、数组对象的方法
		① push(参数1，参数2，.....，参数n)
		* 	- 该方法可以向数组的末尾添加一个或多个元素，并返回数组的新的长度
		② pop()
		* 	- 该方法可以删除数组的最后一个元素,并将被删除的元素作为返回值返回
		③unshift(参数1，参数2，....，参数n)
		* 	- 向数组开头添加一个或多个元素，并返回新的数组长度
		④ shift()
		* 	- 可以删除数组的第一个元素，并将被删除的元素作为返回值返回
		⑤ slice(参数1(开始截取的索引)，参数2(结束截取的索引))	注：参数2可以不写，代表全部截取，区间左闭右开
		* 	- 可以用来从数组提取指定元素
		* 	- 该方法不会改变元素数组，而是将截取到的元素封装到一个新数组中返回
		⑥ splice(参数1，参数2，参数3....)
		* 	- 可以用于删除数组中的指定元素
		* 	- 使用splice()会影响到原数组，会将指定元素从原数组中删除
		* 		并将被删除的元素作为返回值返回
		* 	- 参数：
		* 		第一个，表示开始位置的索引
		* 		第二个，表示删除的数量(注：当参数2为0时，函数执行意味着插入元素)
		* 		第三个及以后。。
		* 			可以传递一些新的元素，这些元素将会自动插入到开始位置索引前边
		⑦ concat()可以连接两个或多个数组，并将新的数组返回
		* 	- 该方法不会对原数组产生影响
		* join()
		* 	- 该方法可以将数组转换为一个字符串
		*		可以有参数，参数作为连接符，不写参数默认参数为","
		⑧ reverse()
		* 	- 反转数组，该方法会直接修改原数组。
		⑨ sort()
		* 	- 可以用来对数组中的元素进行排序
		* 	- 也会影响原数组，默认会按照Unicode编码进行排序

21、forEach及回调函数：
		* forEach()方法需要一个函数作为参数
		* 	- 像这种函数，由我们创建但是不由我们调用的，我们称为回调函数
		* 	- 数组中有几个元素函数就会执行几次，每次执行时，浏览器会将遍历到的元素
		* 		以实参的形式传递进来，我们可以来定义形参，来读取这些内容
		* 	- 浏览器会在回调函数中传递三个参数：
		* 		第一个参数，就是当前正在遍历的元素
		* 		第二个参数，就是当前正在遍历的元素的索引
		* 		第三个参数，就是正在遍历的数组
		* 		arr.forEach(function(value , index , obj){
				console.log(value);
				});
				/*
		* 即使对于纯数字的数组，使用sort()排序时，也会按照Unicode编码来排序，
		* 	所以对数字进排序时，可能会得到错误的结果。
		* 
		* 我们可以自己来指定排序的规则
		* 	我们可以在sort()添加一个回调函数，来指定排序规则，
		* 	- 如果需要升序排列，则返回 a-b
		* 		如果需要降序排列，则返回b-a(详细见《数组的剩余方法.html》)

22、arguments对象：
		* 在调用函数时，浏览器每次都会传递进两个隐含的参数：
		* 	1.函数的上下文对象 this
		* 	2.封装实参的对象 arguments
		* 		- arguments是一个类数组对象(不是数组，却可以用操作数组的方式操作arguments),
		*			它也可以通过索引来操作数据，也可以获取长度
		* 		- 在调用函数时，我们所传递的实参都会在arguments中保存
		* 		- arguments.length可以用来获取实参的长度
		* 		- 我们即使不定义形参，也可以通过arguments来使用实参，
		* 			只不过比较麻烦
		* 			arguments[0] 表示第一个实参
		* 			arguments[1] 表示第二个实参 。。。
		*		- 它里边有一个属性叫做callee，
		* 			这个属性对应一个函数对象，就是当前正在指向的函数的对象

23、Date类
		*方法属性详细见w3c手册
		*关于静态方法的调用：①Date.now();是可行的   ②window.Date.now()也是可行的
		*情况①很好理解，Date是一个类(构造函数)，now方法被声明在原型对象中，可以直接通过类名(构造函数名)调用
		*相当于静态方法，情况②的理解为，所有对象都是window对象的属性。

24、Math类
		* 	- Math和其他的对象不同，它不是一个构造函数，(相当于抽象类)
		* 		它属于一个工具类不用创建对象，它里边封装了数学运算相关的属性和方法
		*	由于JS中强制类型转换好而其他语言不同，所以取随机数的方式有区别
		* 	- 生成一个x-y之间的随机数
		* 		Math.round(Math.random()*(y-x)+x)

25、包装类：
		* 在JS中为我们提供了三个包装类，通过这三个包装类可以将基本数据类型的数据转换为对象
		* 	String()
		* 		- 可以将基本数据类型字符串转换为String对象
		* 	Number()
		* 		- 可以将基本数据类型的数字转换为Number对象
		*  Boolean()
		* 		- 可以将基本数据类型的布尔值转换为Boolean对象
		* 	但是注意：我们在实际应用中不会使用基本数据类型的对象，
		* 		如果使用基本数据类型的对象，在做一些比较时可能会带来一些不可预期的结果
		*包装类的使用主要还是JS运行过程中自己调用比如说123.toString();本质上就是先进行了“自动装箱”

26、String类
		*详细方法见W3CSCHOOL
		*注意：String在JS中并不是一个类，而是基本数据类型，之所以基本数据类型可以调用方法
		*得益于“自动装箱”

27、RegExp类
				实例化方式：①new RegExp("正则表达式","匹配规则");
						   ②var 对象名=/正则表达式/匹配模式;
				方法：test("待匹配字符串");检测待匹配字符串是否符合正则表达式，返回值为布尔类型
		*由于刚刚接触正则表达式，详细看笔记和w3cschool手册

28、文档的加载
		*关于script标签的位置：
		*浏览器在加载一个页面时，是按照自上向下的顺序加载的，
		* 	读取到一行就运行一行,如果将script标签写到页面的上边，
		* 	在代码执行时，页面还没有加载，页面没有加载DOM对象也没有加载
		* 	会导致无法获取到DOM对象(切换到控制台，会显示出错)
		*解决方法有两种：①写在head标签里，但是所有函数要写在window.onload函数对象里
							②写在body标签的最后面 
						
29、DOM及事件：
				见笔记及w3c



复习的补充：
1、JS中的null关键字：
	①表示的是对象未赋值的一种状态，用typeof关键字检测null返回object，Python中没有null关键字。
	②null和undefined的区别：
		undefined表示的是未初始化的变量和对象属性，主要区别在于，null表示丢失的对象，而undefined表示未初始化
	③null是虚值：
		false、0、''、undefined、NAN都是虚值，在条件判断语句中等同于false

2、JS的条件判断是支持"!"表示非的意思的，Ptyhon是目前学的语言中唯一一个不支持"!"的语言
3、prompt函数：
	prompt () 方法用于显示可提示用户进行输入的对话框。 要在对话框中显示的纯文本，如果用户单击提示框的取消按钮，则返回 null。 
	如果用户单击确认按钮，则返回输入字段当前显示的文本。 在用户点击确定按钮或取消按钮把对话框关闭之前，
	它将阻止用户对浏览器的所有输入。 在调用 prompt () 时，将暂停对 JavaScript 代码的执行，在用户作出响应之前，不会执行下一条语句。

4、JS操纵文档流
	JS文档流的概念：当使用JS的DOM操作HTML文档时，浏览器会自动创建文档流，当页面加载完成后，文档流自动关闭
	而window.onload事件即是文档流关闭之后，若在事件中调用write方法，会自动调用open方法，创建新的文档流
	新的文档流默认覆盖之前的文档内容，新开辟的文档流需要调用close方法关闭。

	核心方法：documnet.write()、documnet.colse()、document.open();

	①documnet.write()：作用是当浏览器文档流自动关闭之后开辟新的文档流(自动调用open)，覆盖HTML文档之前的内容，
						若是浏览器开辟的文档流没有关闭，不会创建新的文档流。
	②document.close(): 关闭自己创建的文档流，无权关闭浏览器创建的文档流
		详细链接：https://www.php.cn/js-tutorial-404652.html

5、JS的Number类型：
	三个关键字：Infinity 表示正无穷  -Infinity 表示负无穷    NaN 是一个特殊的数字，表示Not A Number
	对这三个关键字尽心typeof类型检查，返回的都是number

6、JS浮点数运算精度丢失问题：
	二进制无法精确表示0.1等，所以会造成精度丢失，JS并没有解决这个问题,精确的运算应当到服务器中进行

7、字符串和数字之间的转换：
	①其他类型转字符串
		.toString()方法     或者      String()方法
	②字符串转数字：
		Number()方法   或者   parseInt、paresFloat方法
		不可转换时返回NAN，转换空串、空格串是返回0
8、JS通过运算符进行类型转换：
	①"+",字符串通过加号可以使任意类型类型字符串，实现字符串的拼接，底层调用String()
	②"-  *  %"，做数字运算时，会自动进行向Number类型的转化，底层调用Number()

9、JS中的相等运算符
	"=="	相等
	"!="	不相等
	"==="	全等          switch-case语句里进行的是全等比较
	"!=="	不全等
	前两种会自动进行类型转换都判断，后两种不会
10、object对象的两种实例化方式：
	①字面量实例化
		var obj1={
			属性名1:属性值1,
			属性名2:属性值2,....
			};
	②构造函数实例化
		var obj2=new object();
11、函数的两种定义形式
	①var fun = new Function("console.log('Hello 这是我的第一个函数');");
	②function 函数名([形参1,形参2...形参N]){
							语句...
					}
12、JS模拟函数重载
	首先JS语言本身并没有提供函数重载的机制，JS解释器把函数名作为唯一标识，对函数进行调用
	多传入的参数不会赋值，少传入的参数为undefined。
	我们可以通过判断函数内的arguments对象的长度来模拟重载

13、函数内的arguments对象
	函数调用时，函数内会隐式传入两个对象，this及arguments，arguments记录了传入的参数信息
	arguments对象本身不是数组，是伪数组，可以当做数组去使用
	arguments[0]即表示第一个参数
	arguments.length即表示参数的个数

14、函数的默认返回值
	无返回值声明，默认返回undefined，在Python中默认返回None
15、JS中的in运算符：
	①in 运算符
		作用：用于判断对象(包括其原型)是否存在某个属性，返回值为bool类型
		if(属性名 in 对象名)---->ture/false
	②for in 语句
		作用：用于遍历对象的所有属性
		语法：
				for(var n in obj){
					console.log("属性名:"+n+"属性值:"+obj[n]);
				}

16、不使用var关键字定义变量：
	不管是直接在script标签里不使用var关键字，还是在函数体内不使用var关键字，都视为全局变量

17、instenceof
	类型检查运算符，作用与Java语言相同
18、JS设计一个类的步骤？
	其实就是设计一个构造函数的步骤：
		①设置构造函数的属性
		②向该构造函数的原型中添加方法。
19、调用某个对象的不存在的属性的时候，会被解释为向某对象添加该属性。
20、JS重写的实现：
	通过拦截原型链的调用。如，在构造函数的原型中添加toString，就会执行该方法而不是object原型对象中的toString。
21、JS实现了垃圾回收机制
22、DOM对象的三个属性的区分：
    ①value属性：
        value属性指咋HTML标签中某个标签的value属性的值。
    ②innerHtml属性：
        指某个DOM对象对应标签中的所有内容，包括其内嵌套的HTML标签。
    ③innerText属性：
        指某个DOM对象对应标签中的文字内容，不包括其内嵌套的HTML标签。
23、<select>标签对应的DOM对象：
    <select>标签中嵌套了<option>标签，如何从网页中获取用户选择了那个选项，并得到对应的value?
    关键：
        <select>标签对应的DOM对象有options属性，代表的是所有嵌套的option标签的DOM对象数组，
        还有selectedIndex属性，代表的是当前被选中的option对象的索引。
        故选中的value可表示为：
            select=document.getElementsById("..");
            value=select.options[select.selectedIndex].value;
24、浏览器模型
    ①浏览器的组成
        浏览器的核心是两部分：渲染引擎和 JavaScript 解释器（又称 JavaScript 引擎）。
        渲染引擎：渲染引擎的主要作用是，将网页代码渲染为用户视觉可以感知的平面文档。
        JavaScript 引擎：JavaScript 引擎的主要作用是，读取网页中的 JavaScript 代码，对其处理后运行。
    ②网页加载流程
        -浏览器一边下载 HTML 网页，一边开始解析（渲染引擎）。也就是说，不等到下载完，就开始解析。
        -解析过程中，浏览器发现<script>元素，就暂停解析，把网页渲染的控制权转交给 JavaScript 引擎（解析器完成）。
        -如果<script>元素引用了外部脚本，就下载该脚本再执行，否则就直接执行代码。
        -JavaScript 引擎执行完毕，控制权交还渲染引擎，恢复往下解析 HTML 网页。
    ③渲染引擎
        1)解析代码：HTML 代码解析为 DOM，CSS 代码解析为 CSSOM（CSS Object Model）。
        2) 对象合成：将 DOM 和 CSSOM 合成一棵渲染树（render tree）。
        3)布局：计算出渲染树的布局（layout）。
        4)绘制：将渲染树绘制到屏幕。
    ④重流和重绘
        见ppt
    ⑤JavaScript引擎
        具有即时编译的功能
    更多见ppt
25、let
    ES6新增了let命令，用来声明变量，他的用法类似于var，但是声明的变量仅在块级作用域有效。
    特性：
        ①仅在块级作用域有效
        ②不存在变量提升
        ③暂时性死区(绑定作用域)
        ④不允许重复声明
        ⑤for的父级作用域
    详见ppt
26、JavaScript的异步加载
    存在的问题：引入JavaScript代码时，页面的下载和渲染都会暂停，等待脚本执行完成后才会继续（内嵌式或外链式）。
        解决的办法1：对于不需要提前执行的代码，将<script>标签放在<body>标签的底部，可以减少对整个页面下载的影响。
        解决的办法2：为<script>标签新增的两个可选属性：async和defer。
    对async及defer的介绍：
        async异步加载，即先下载文件，不阻塞其他代码执行，下载完成后再执行。
        defer用于延后执行，即先下载文件，直到网页加载完成后再执行。
        共同点：即使文件下载失败，也不会阻塞后面的JavaScript代码执行。











