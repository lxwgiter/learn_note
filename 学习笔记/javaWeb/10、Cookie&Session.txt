十、Cookie
    1、什么是Cookie？
        ①Cookie 翻译过来是饼干的意思。
        ②Cookie 是服务器通知客户端保存键值对的一种技术。
        ③客户端有了 Cookie 后，每次请求都发送给服务器。
        ④每个 Cookie 的大小不能超过 4kb
    2、如何创建Cookie，并让客户端保存？
        当客户端访问服务器中某个servlet时，servlet中声明了如下语句：
            Cookie cookie=new Cookie("key","value");//创建Cookie对象
            response.addCookie(cookie);//通过响应通知客户端保存Cookie
        则说明Cookie创建成功。
    3、服务器如何获取客户端保存的Cookie？
        只需要在对应servlet程序中声明：
            Cookie[] cookies=req.getCookies();//通过响应获取Cookie对象数组
        即可得到Cookie对象数组
    4、Cookie的值如何修改？
        方案一：
            1、先创建一个要修改的同名（指的就是 key）的 Cookie 对象
            2、在构造器，同时赋于新的 Cookie 值。
            3、调用 response.addCookie( Cookie );
        方案二：
            1、先查找到需要修改的 Cookie 对象
            2、调用 setValue()方法赋于新的 Cookie 值。
            3、调用 response.addCookie()通知客户端保存修改

    5、什么是Cookie的生命控制？
        定义：
            Cookie 的生命控制指的是如何管理 Cookie 什么时候被销毁（删除）
        主要方法：
            Cookie对象.setMaxAge();
            正数，表示在指定的秒数后过期------>若正数设置的比较大，浏览器关闭时，下次再打开也会存在
            负数，表示浏览器一关，Cookie 就会被删除（默认值是-1）
            零，表示马上删除 Cookie

    6、Cookie的path属性
        Cookie 的 path 属性可以有效的过滤哪些 Cookie 可以发送给服务器。哪些不发。path 属性是通过请求的地址来进行有效的过滤。
        应用：
            CookieA path=/工程路径
            CookieB path=/工程路径/abc
            请求地址如下：
                ①http://ip:port/工程路径/a.html
                    CookieA 发送
                    CookieB 不发送
                ②http://ip:port/工程路径/abc/a.html
                    CookieA 发送
                    CookieB 发送
             请求地址是Cookie的path属性的子集时才会发送。
         主要方法：
         setPath();
    7、Cookie的应用
        当客户端访问过某个资源时，让客户端保存下Cookie，这样，二次访问时，服务器通过响应头就可以知道，
        该客户端之前访问过服务器，可以实现免账号或者免密登录。

十一、Session
    1、什么是Session？
        ①Session 就一个接口（HttpSession）。
        ②Session 就是会话。它是用来维护一个客户端和服务器之间关联的一种技术。
        ③每个客户端都有自己的一个 Session 会话。(使用Cookie保存，在发起请求时通过响应头通知服务器)
        ④Session 会话中，我们经常用来保存用户登录之后的信息。
    2、如何创建Session？
        涉及API：
            1)request.getSession()
                ①第一次调用是：创建 Session 会话
                ②之后调用都是：获取前面创建好的 Session 会话对象。
            2)isNew();
                判断到底是不是刚创建出来的（新的）
                true 表示刚创建
                false 表示获取之前创建
            3)getId()
                得到 Session 的会话 id 值
                每个会话都有一个身份证号。也就是 ID 值。而且这个 ID 是唯一的。

    3、Session域中的数据存取：
        ①向Session域中存数据：
            Session对象.setAttribute("key", "value");//必须都是String类型的键值对
        ②取Session域中的数据：
            Session对象.getAttribute("key");//返回值类型为String类型

    4、Session的生命控制
        1)相关API：
            ①public void setMaxInactiveInterval(int interval);
                设置 Session 的超时时间（以秒为单位），超过指定的时长，Session就会被销毁。
                参数值：
                    正数的时候，设定 Session 的超时时长。
                    负数表示永不超时（极少使用）
            ②public int getMaxInactiveInterval()
                获取 Session 的超时时间
            ③public void invalidate()
                让当前 Session 会话马上超时无效。
        2)Session对象的默认生命时长：
            Session 默认的超时时间长为 30 分钟。
            因为在Tomcat服务器的配置文件web.xml中默认有以下的配置，它就表示配置了当前Tomcat服务器下所有的Session
            超时配置默认时长为：30 分钟。
            <session-config>
            <session-timeout>30</session-timeout>
            </session-config>
        3)修改Session的默认生命时长
            方式一：
                在当前工程的web目录下的web.xml文件中配置默认时长，作用于该web工程下所有的资源。
                声明格式如下：
                    <session-config>
                    <session-timeout>20</session-timeout>
                    </session-config>
            方式二：
                session.setMaxInactiveInterval(int interval)
                单独设置超时时长，仅作用于当前Session对象。

    5、Session超时的概念：
            指客户端两次发起请求访问Session对象的间隔超过了Session对象的生命时长。
    6、Session与浏览器之间的技术内幕
            Session 技术，底层其实是基于 Cookie 技术来实现的！
            模拟浏览器和服务器之间的交互：
                ①当浏览器第一次访问服务器时，服务器的req.getSession方法发现请求头中的Cookie中没有Session信息，就会创建Session对象
                并保存到服务器的内存中。然后通过响应通知浏览器保存一个Cookie对象key="JSESSIONID",vaklue=Session对象的ID。
                ②当浏览器再次访问服务器时，请求头会带着已经保存的Cookie对象，此时req.getSession方法会根据ID到服务器内存中查找对应的
                Session对象。
                ③若是手动的在浏览器删除保存Session信息的Cookie，则会重复①②步骤....

    7、Session的应用
        存储会话信息供浏览器后续请求使用，可以获取并修改变量的值。和cookie一起使用识别同一个客户。
    8、Cookie和Session的区别和联系：
        ①Cookie机制采用的是在客户端保持状态的方案，而Session机制采用的是在服务器端保持状态的方案。
        ②Cookie对象保存在浏览器中，通过请求头传递给服务器，服务器可以得到相应的键值对。
        ③Session对象保存在服务器内存中，真正要操作Session对象需要得要SessioinID，定位到该对象。