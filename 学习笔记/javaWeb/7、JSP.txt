七、JSP
    1. 什么是 jsp ，它有什么用?
        jsp 的全称是 java server pages。Java 的服务器页面。
        jsp 的主要作用是代替 Servlet 程序回传 html 页面的数据。
        因为 Servlet 程序回传 html 页面数据是一件非常繁锁的事情。开发成本和维护成本都极高。

    2、如何使用servlet和jsp回传页面
        ①servlet：
            使用HttpServletResponse对象的输出流Writer对象，调用write方法，写入
            response缓冲区，进而写入html源代码
        ②jsp：
            直接将html页面写入jsp页面即可

    3、jsp 如何访问：
        jsp 页面和 html 页面一样，都是存放在 web 目录下。访问也跟访问 html 页面一样。
        但是访问的底层实现不同。

    4、jsp  的本质是什么。
          ①我们跟踪原代码发现，HttpJspBase 类。它直接地继承了 HttpServlet 类。也就是说。jsp 翻译出来的 java 类，它间接了继
          承了 HttpServlet 类。也就是说，翻译出来的是一个 Servlet 程序
          jsp 页面本质上是一个 Servlet 程序。
          ②当我们第一次访问 jsp 页面的时候。Tomcat 服务器会帮我们把 jsp 页面翻译成为一个 java 源文件。并且对它进行编译成
          为.class 字节码程序。我们打开 java 源文件不难发现其里面的内容也是通过write方法写入到html页面的。
          流程：编写jsp页面-->服务器启动-->jsp被翻译成servlet-->写入html页面
          ③总结：通过翻译的 java 源代码我们就可以得到结果：jsp 就是 Servlet 程序。

    5、jsp 的三种语法
        ①jsp  头部的 page 指令
            jsp 的 page 指令可以修改 jsp 页面中一些重要的属性，或者行为。
            <%@ page contentType="text/html;charset=UTF-8" language="java" %>
            i. language 属性 表示 jsp 翻译后是什么语言文件。暂时只支持 java。
            ii. contentType 属性 表示 jsp 返回的数据类型是什么。也是源码中 response.setContentType()参数值
            iii. pageEncoding 属性 表示当前 jsp 页面文件本身的字符集。
            iv. import 属性 跟 java 源代码中一样。用于导包，导类。
            ========================两个属性是给 out 输出流使用=============================
            v. autoFlush 属性 设置当 out 输出流缓冲区满了之后，是否自动刷新冲级区。默认值是 true。
            vi. buffer 属性 设置 out 缓冲区的大小。默认是 8kb
            ========================两个属性是给 out 输出流使用=============================
            vii. errorPage 属性 设置当 jsp 页面运行时出错，自动跳转去的错误页面路径。
            viii. isErrorPage 属性 设置当前 jsp 页面是否是错误信息页面。默认是 false。如果是 true 可以
            获取异常信息。
            ix. session 属性 设置访问当前 jsp 页面，是否会创建 HttpSession 对象。默认是 true。
            x. extends 属性 设置 jsp 翻译出来的 java 类默认继承谁。

        ②jsp 中的常用脚本
            i.声明脚本( 极少使用)
                声明脚本的格式是： <%! 声明 java 代码 %>
                作用：可以给 jsp 翻译出来的 java 类定义属性和方法甚至是静态代码块。内部类等。
            ii.表达式脚本 （常用）
                表达式脚本的格式是：<%=表达式%>
                表达式脚本的作用是：的 jsp 页面上输出数据。
                表达式脚本的特点：
                1、所有的表达式脚本都会被翻译到_jspService() 方法中
                2、表达式脚本都会被翻译成为 out.print()输出到页面上
                3、由于表达式脚本翻译的内容都在_jspService() 方法中,所以_jspService()方法中的对象都可以直接使用。
                4、表达式脚本中的表达式不能以分号结束。
            iii.代码脚本
                代码脚本的格式是：
                <% java 语句 %>
                代码脚本的作用是：可以在 jsp 页面中，编写我们自己需要的功能（写的是 java 语句）。
                代码脚本的特点是：
                1、代码脚本翻译之后都在_jspService 方法中
                2、代码脚本由于翻译到_jspService()方法中，所以在_jspService()方法中的现有对象都可以直接使用。
                3、还可以由多个代码脚本块组合完成一个完整的 java 语句。
                4、代码脚本还可以和表达式脚本一起组合使用，在 jsp 页面上输出数据

    6、jsp 中的三种注释
        ① html注释
            <!-- 这是 html 注释 -->
            html 注释会被翻译到 java 源代码中。在_jspService 方法里，以 out.writer 输出到客户端。
        ②java注释
            java 注释会被翻译到 java 源代码中。
            <%
            // 单行 java 注释
            /* 多行 java 注释 */
            %>
        ③jsp注释
            <%-- 这是 jsp 注释 --%>
            jsp 注释可以注掉，jsp 页面中所有代码。

    7、jsp九大内置对象
        ①request            请求对象
        ②response           响应对象
        ③pageContext        jsp上下文对象
        ④session            会话对象
        ⑤application        servletContext对象
        ⑥config             servletConfig对象
        ⑦out                jsp输出流对象
        ⑧page               指向当前jsp对象
        ⑨exception          异常对象

    8、jsp四大域对象
        四个域对象分别是：
        ①pageContext (PageContextImpl 类) 当前 jsp 页面范围内有效
        ②request (HttpServletRequest 类)、 一次请求内有效
        ③session (HttpSession 类)、 一个会话范围内有效（打开浏览器访问服务器，直到关闭浏览器）
        ④application (ServletContext 类) 整个 web 工程范围内都有效（只要 web 工程不停止，数据都在）

        域对象是可以像 Map 一样存取数据的对象。四个域对象功能一样。不同的是它们对数据的存取范围。
        虽然四个域对象都可以存取数据。在使用上它们是有优先顺序的。
        四个域在使用的时候，优先顺序分别是，他们从小到大的范围的顺序。
        pageContext ====>>> request ====>>> session ====>>> application

    9、jsp中的out输出和response.getWriter输出的区别
        jsp内置对象out并不是简单的响应输出流对象，而是继承自响应输出流对象Writer
        结论：无论response.getWriter和out的书写先后顺序，由于底层实现，都是response的内容先输出
        out.write() 输出字符串没有问题
        out.print() 输出任意数据都没有问题（都转换成为字符串后调用的 write 输出）
        深入源码，浅出结论：在 jsp 页面中，可以统一使用 out.print()来进行输出

    10、jsp常用标签
        ①jsp 静态包含
            示例说明：
            <%@ include file=""%> 就是静态包含
            file 属性指定你要包含的 jsp 页面的路径
            地址中第一个斜杠 / 表示为 http://ip:port/ 工程路径 / 映射到代码的 web 目录
            静态包含的特点：
                1 、静态包含不会翻译被包含的 jsp 页面。
                2 、静态包含其实是把被包含的 jsp 页面的代码拷贝到包含的位置执行输出。
            <%@ include file="/include/footer.jsp"%>
        ②jsp 动态包含 动态包含
            示例说明：
            <jsp:include page=""></jsp:include> 这是动态包含
            page 属性是指定你要包含的 jsp 页面的路径
            动态包含也可以像静态包含一样。把被包含的内容执行输出到包含位置
            动态包含的特点：
                1 、动态包含会把包含的 jsp 页面也翻译成为 java 代码
                2 、动态包含底层代码使用如下代码去调用被包含的 jsp 页面执行输出。
            JspRuntimeLibrary.include(request, response, "/include/footer.jsp", out, false);
            3 、动态包含，还可以传递参数
            <jsp:include page="/include/footer.jsp">
            <jsp:param name="username" value="bbj"/>
            <jsp:param name="password" value="root"/>
            </jsp:include>
        ③jsp  标签-转发 转发
            示例说明：
            <jsp:forward page=""></jsp:forward> 是请求转发标签，它的功能就是请求转发
            page 属性设置请求转发的路径
            <jsp:forward page="/scope2.jsp"></jsp:forward>