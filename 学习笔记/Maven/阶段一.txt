1、什么是Maven？
    ●Maven 是 Apache 软件基金会组织维护的一款专门为 Java 项目提供构建和依赖管理支持的工具。
    ●Maven是一个项目管理工具，它包含了一个对象模型。一组标准集合，一个依赖管理系统。和用来运行定义在生命周期阶段中插件目标和逻辑。
    ●同时Maven 是使用 Java 语言编写的，因此它和 Java 一样具有跨平台性，这意味着无论是在 Windows ，
    还是在 Linux 或者 Mac OS 上，都可以使用相同的命令进行操作。
2、为什么要学习Maven？
    ●jar包规模的增长：
        随着我们使用越来越多的框架，或者框架封装程度越来越高，项目中使用的jar包也越来越多。项目中，
        一个模块里面用到上百个jar包是非常正常的。
    ●jar包的规范问题：
        jar包来源、jar包名称、版本等等问题。
    ●jar包之间的依赖关系：
        框架中使用的 jar 包，不仅数量庞大，而且彼此之间存在错综复杂的依赖关系。依赖关系的复杂程度，
        已经上升到了完全不能靠人力手动解决的程度。另外，jar 包之间有可能产生冲突。进一步增加了我们在
        jar包使用过程中的难度。
    Maven作用之一：
        自动下载对应的jar包、处理jar包冲突、管理jar包之间的依赖。
    除此之外，Maven还能做：
        1.构建工程，2.编译代码，3.自动运行单元测试，4.打包 5.生成报表，6.部署项目，生成web站点。

3、Maven做构建管理工具：
    ①什么是构建 ？
        Java 项目开发过程中，构建指的是使用『原材料生产产品』的过程。
            ●原材料：Java源代码、基于HTML的Thymeleaf文件、图片、配置文件、……
            ●产品：一个可以在服务器上运行的项目
        构建的主要环节：
            ●清理：删除上一次构建的结果，为下一次构建做好准备
            ●编译：Java 源程序编译成 *.class 字节码文件
            ●测试：运行提前准备好的测试程序
            ●报告：针对刚才测试的结果生成一个全面的信息打包：
                Java工程：jar包
                Web工程：war包
            ●安装：把一个 Maven 工程经过打包操作生成的 jar 包或 war 包存入 Maven 仓库
            ●部署
                部署 jar 包：把一个 jar 包部署到 Nexus 私服服务器上
                部署 war 包：借助相关 Maven 插件（例如 cargo），将 war 包部署到 Tomcat 服务器上

    ②你可以不使用 Maven，但是构建必须要做。当我们使用 IDEA 进行开发时，构建是 IDEA 替我们做的。
    ③脱离 IDE 环境仍需构建
    ④结论：通过Maven，可以让构建更自动化、更简单，所以我们通常使用Maven项目。

4、什么是Maven项目？
    我们这样来理解maven项目，就是在java项目和web项目上裹了一层maven，本质上java项目还是java项目，
    web项目还是web项目，但是包裹了maven之后，就可以使用maven提供的一些功能，

5、什么是依赖？
    ●如果 A 工程里面用到了 B 工程的类、接口、配置文件等等这样的资源，那么我们就可以说 A 依赖 B。例如：
    junit-4.12 依赖 hamcrest-core-1.3

6、Maven作为依赖管理工具：
    ●jar 包的下载：使用 Maven 之后，jar 包会从规范的远程仓库下载到本地
    ●jar 包之间的依赖：通过依赖的传递性自动完成
    ●jar 包之间的冲突：通过对依赖的配置进行调整，让某些jar包不会被导入

7、Maven工作机制：
    关键字为：Maven工程、Maven核心程序、Maven命令、Maven仓库、远程仓库..
    具体看pdf

8、Maven核心程序：
    ●核心程序中包括了Maven的基础命令，当使用某些命令时，如果不存在，会在执行前先下载该命令插件。
    ●Maven核心程序需要下载，并且配置环境变量
    ●settings.xml：在conf目录下，编辑并保存了Maven的核心配置，比如本地仓库的地址、远程仓库的地址、构建时使用的jdk版本...

9、Maven中的坐标
    ①向量说明
        使用三个『向量』在『Maven的仓库』中唯一的定位到一个『jar』包。
            ●groupId：公司或组织的 id
            ●artifactId：一个项目或者是项目中的一个模块的 id
            ●version：版本号
    ②三个向量的取值方式
        ●groupId：公司或组织域名的倒序，通常也会加上项目名称   例如：com.atguigu.maven
        ●artifactId：模块的名称，将来作为 Maven 工程的工程名
        ●version：模块的版本号，根据自己的需要设定
            例如：SNAPSHOT 表示快照版本，正在迭代过程中，不稳定的版本
            例如：RELEASE 表示正式版本
    ③坐标和仓库中 jar 包的存储路径之间的对应关系
        <groupId>javax.servlet</groupId>
        <artifactId>servlet-api</artifactId>
        <version>2.5</version>
        映射到：
        Maven本地仓库根目录\javax\servlet\servlet-api\2.5\servlet-api-2.5.jar

10、Maven工程的目录结构：
    ①各个目录的作用
        ●Java项目：
            ProjectName---------------工程名
                src-------------------源码目录
                    main--------------主体程序目录
                        java----------Java源代码目录
                            Java代码---包结构
                        resources-----配置文件目录
                    test------------------测试程序目录
                        java--------------Java源代码目录
                        resources-----配置文件目录
                target----------------构建结果存放目录
                pom.xml

        ●Web项目：
            ProjectName---------------工程名
                src-------------------源码目录
                    main--------------主体程序目录
                        java----------Java源代码目录
                            Java代码---包结构
                        resources-----配置文件目录
                        webapp--------web目录
                            WEB-INF
                                lib
                                web.xml
                    test------------------测试程序目录
                        java--------------Java源代码目录
                        resources-----配置文件目录
                target----------------构建结果存放目录
                pom.xml

    ②约定目录结构的意义
         Maven 为了让构建过程能够尽可能自动化完成，所以必须约定目录结构的作用。例如：Maven 执行编
         译操作，必须先去 Java 源程序目录读取 Java 源代码，然后执行编译，最后把编译结果存放在 target 目
         录。
                
    ③约定大于配置
        Maven 对于目录结构这个问题，没有采用配置的方式，而是基于约定。这样会让我们在开发过程中非常
        方便。如果每次创建 Maven 工程后，还需要针对各个目录的位置进行详细的配置，那肯定非常麻烦。
        目前开发领域的技术发展趋势就是：约定大于配置，配置大于编码。

        
11、Maven工程的创建：
    ●首先明确三个层次：
             Maven 核心程序：中军大帐
             Maven 本地仓库：兵营
             本地工作空间(Maven工程)：战场
    ●命令行生成Java项目的Maven工程：
         在指定文件夹目录下运行：mvn archetype:generate
         进入pom.xml确认：<packaging>jar</packaging>
    ●命令行生成Web项目的Maven工程：
        在指定文件夹目录下运行：
        mvn archetype: generate -DarchetypeGroupId=org.apache.maven.archetypes -DarchetypeArtifactId=maven-archetype-webapp -DarchetypeVersion=1.4
        参数 archetypeGroupId、archetypeArtifactId、archetypeVersion 用来指定现在使用的 maven-archetype-webapp 的坐标。
        进入pom.xml确认：<packaging>war</packaging>

12、Maven核心概念：POM
    ①含义
        POM：Project Object Model，项目对象模型。和 POM 类似的是：DOM（Document Object
        Model），文档对象模型。它们都是模型化思想的具体体现。

    ②模型化思想
        POM 表示将工程抽象为一个模型，再用程序中的对象来描述这个模型。这样我们就可以用程序来管理项
        目了。我们在开发过程中，最基本的做法就是将现实生活中的事物抽象为模型，然后封装模型相关的数
        据作为一个对象，这样就可以在程序中计算与现实事物相关的数据。
        
    ③对应的配置文件
        POM 理念集中体现在 Maven 工程根目录下 pom.xml 这个配置文件中。所以这个 pom.xml 配置文件就
        是 Maven 工程的核心配置文件。其实学习 Maven 就是学这个文件怎么配置，各个配置有什么用。

13、Maven的构建命令
    要求：
        运行 Maven 中和构建操作相关的命令时，必须进入到 pom.xml 所在的目录。
    ①清理操作：
        mvn clean       效果：删除 target 目录
    ②编译操作：
        ●主程序编译：mvn compile----------------------主体程序编译结果存放的目录：target/classes
        ●测试程序编译：mvn test-compile----------------测试程序编译结果存放的目录：target/test-classes
    ③测试操作：
        ●mvn test-----------------------------------测试的报告存放的目录：target/surefire-reports
    ④打包操作：
        ●mvn package--------------------------------打包的结果——jar/war包，存放的目录：target
    ⑤安装操作：
        ●mvn install
        安装的效果是将本地构建过程中生成的 jar包存入Maven本地仓库。这个 jar 包在 Maven 仓库中的路径是根据它的坐标生成的。
        另外，安装操作还会将 pom.xml 文件转换为 XXX.pom 文件一起存入本地仓库。所以我们在 Maven 的
        本地仓库中想看一个 jar 包原始的 pom.xml 文件时，查看对应 XXX.pom 文件即可，它们是名字发生了
        改变，本质上是同一个文件。

14、原始方式部署web工程：
    ①指定目录，命令行形式生成web工程
    ②书写业务代码、配置依赖(添加原料)
    ③执行构建命令：mvn compile
    ④执行打包命令：mvn package，打成war包
    ⑤将war包部署到Tomcat上，即将war包复制到Tomcat/webapps目录下
    ⑥启动Tomcat即可访问

16、Web工程依赖Java工程
    ①观念：
        明确一个意识：从来只有 Web 工程依赖 Java 工程，没有反过来 Java 工程依赖 Web 工程。本质上来
        说，Web 工程依赖的 Java 工程其实就是 Web 工程里导入的 jar 包。最终 Java 工程会变成 jar 包，放在
        Web 工程的 WEB-INF/lib 目录下。
    ②如何依赖：
        在web工程的 pom.xml 中，找到 dependencies 标签，在 dependencies 标签中书写本地仓库中jar包的坐标
    ③测试：
        mvn test
        说明：测试操作中会提前自动执行编译操作，测试成功就说明编译也是成功的。
    ④mvn package
        通过查看 war 包内的结构，我们看到被 Web 工程依赖的 Java 工程确实是会变成 Web 工程的 WEB-INF/lib 目录下的 jar 包。
    ⑤查看当前 Web 工程所依赖的 jar 包的列表
        ●mvn dependency:list--------列表形式查看
        ●mvn dependency:tree--------树形结构查看
17、依赖的范围
    ①<scope>标签
        标签的位置：dependencies/dependency/scope
        标签的可选值：compile/test/provided/system/runtime/import

    ②前三者的对比
                main目录（空间）      test目录（空间）      开发过程（时间）        部署到服务器（时间）
    compile         有效                  有效              有效                  有效
    provided        有效                  有效              有效                  无效
    test            无效                  有效              有效                  无效

    ③说明：
        ●compile：通常使用的第三方框架的 jar 包这样在项目实际运行时真正要用到的 jar 包都是以 compile 范
        围进行依赖的。比如 SSM 框架所需jar包。
        ●test：测试过程中使用的 jar 包，以 test 范围依赖进来。比如 junit。
        ●provided：在开发过程中需要用到的“服务器上的 jar 包”通常以 provided 范围依赖进来。比如 servlet-
        api、jsp-api。而这个范围的 jar 包之所以不参与部署、不放进 war 包，就是避免和服务器上已有的同类
        jar 包产生冲突，同时减轻服务器的负担。说白了就是：“服务器上已经有了，你就别带啦！”

18、依赖的传递性：
    ①什么是依赖的传递性：
        A 依赖 B，B 依赖 C，那么在 A 没有配置对 C 的依赖的情况下，A 里面能不能直接使用 C？
    ②结论：
        在 A 依赖 B，B 依赖 C 的前提下，C 是否能够传递到 A，取决于 B 依赖 C 时使用的依赖范围。
            ●B 依赖 C 时使用 compile 范围：可以传递
            ●B 依赖 C 时使用 test 或 provided 范围：不能传递，所以需要这样的 jar 包时，就必须在需要的地
            方明确配置依赖才可以。

19、依赖的排除
    ①为什么要做依赖的排除
        ●当 A 依赖 B，B 依赖 C 而且 C 可以传递到 A 的时候，A 不想要 C，需要在 A 里面把 C 排除掉。而往往这种情况都是为了避免 jar 包之间的冲突。
        ●所以配置依赖的排除其实就是阻止某些 jar 包的传递。因为这样的 jar 包传递过来会和其他 jar 包冲突。

    ②如何做依赖的排除
        ●标签的位置：dependencies/dependency/exclusions
        ●<exclusions>标签，子标签为:<exclusion>
        ●<exclusions>标签,子标签为：groupId、artifactId，（不需要写version）定位本地仓库的jar

20、Maven工程间的继承：
    ①概念：
        A 工程继承 B 工程
        本质上是 A 工程的 pom.xml 中的配置继承了 B 工程中 pom.xml 的配置。
    ②前提条件：
        父工程的打包方式必须为pom，子工程要在父工程目录下创建。如果打包方式不是pom，则在该目录下创建maven工程会报错。
    ③作用：
        在父工程中统一管理项目中的依赖信息，具体来说是管理依赖信息的版本。
        ●对一个比较大型的项目进行了模块拆分。
        ●一个 project 下面，创建了很多个 module。
        ●每一个 module 都需要配置自己的依赖信息。
    ④背后的需求是：
        ●在每一个 module 中各自维护各自的依赖信息很容易发生出入，不易统一管理。
        ●使用同一个框架内的不同 jar 包，它们应该是同一个版本，所以整个项目中使用的框架版本需要统 一。
        ●使用框架时所需要的 jar 包组合（或者说依赖信息组合）需要经过长期摸索和反复调试，最终确定一个可用组合。这个耗费很大精力总结出来的方案不应该在新的项目中重新摸索。
        ●通过在父工程中为整个项目维护依赖信息的组合既保证了整个项目使用规范、准确的 jar 包；又能够将以往的经验沉淀下来，节约时间和精力。
    ⑤如何操作
        1)创建父工程
        2)工程创建好之后，要修改它的打包方式：
            只有打包方式为 pom 的 Maven 工程能够管理其他 Maven 工程。打包方式为 pom 的 Maven 工程中不写业务代码，它是专门管理其他 Maven 工程的工程。
        3)进入父工程目录，创建模块工程
            此时父工程的pom.xml自动修改，添加了modules标签，其子标签module标注了子工程
            子工程的pom.xml也会不同：生成了parent标签，其中有三个向量定位父工程坐标(不一定是仓库中的jar)
        4)在父工程中配置依赖的统一管理：
            使用dependencyManagement标签配置对依赖的管理
            被管理的依赖并没有真正被引入到工程
            <dependencyManagement>/<dependencies>/<dependency>/三个向量，定位到依赖的jar
        5)子工程中引用那些被父工程管理的依赖：
            子工程引用父工程中的依赖信息时，可以把版本号去掉
            把版本号去掉就表示子工程中这个依赖的版本由父工程决定。
            具体来说是由父工程的dependencyManagement来决定。
        6)在父工程中升级依赖信息的版本：
            如有需要，父工程可以修改版本信息，相当于对所有子工程都做了修改。

21、Maven中的聚合
    ①概念
        使用一个“总工程”将各个“模块工程”汇集起来，作为一个整体对应完整的项目。
        项目：整体、模块：部分
    ②概念的对应关系：
         从继承关系角度来看：父工程、子工程
         从聚合关系角度来看：总工程、模块工程

22、工程中的循环依赖问题：
    如果 A 工程依赖 B 工程，B 工程依赖 C 工程，C 工程又反过来依赖 A 工程，那么在执行构建操作时会报下面的错误：
    DANGER
    [ERROR] [ERROR] The projects in the reactor contain a cyclic reference:
    这个错误的含义是：循环引用。


pom.xml解读：
    <dependencies>标签：
        <dependency>的父标签
    <dependency>标签：
        子标签有groupId、artifactId、version、scope
        前三者用于指定该工程依赖的jar及它在仓库中的坐标，scope限定了该jar包的作用范围。
    <groupId>、<artifactId>、<version>标签：
        用来定位本地仓库中的jar包，分两种情况：
        ①没写在<dependency>标签里：代表该工程的坐标
        ②写在<dependency>标签里，代表该工程依赖的jar包在本地仓库中的坐标。
    <packaging>标签：
        表示当前Maven工程的打包方式，可选值有下面三种：
            jar：表示这个工程是一个Java工程
            war：表示这个工程是一个Web工程
            pom：表示这个工程是“管理其他工程”的工程
    <name>、</url>标签：
        表示Maven工程名和地址，和坐标做区分。
    <properties>标签：
        其中含有预定义的子标签，如<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>用来设置字符集
        支持自定义子标签
    <exclusions>标签：
        父标签为<dependency>,子标签为：<exclusion>,用于排除依赖
    <exclusion>标签：
        子标签为，groupId、artifactId，（不需要写version）定位本地仓库的jar，来排除依赖。
    <modules>标签：
        子标签为<moudle>,该标签只出现在打包方式为pom的父工程中，标签内容为其子工程名。
    <parent>标签：
        子标签为三个向量，用于标识其父工程。
    <dependencyManagement>标签：
        子标签为<dependencies>，只出现于父工程中，用来统一管理子工程。





