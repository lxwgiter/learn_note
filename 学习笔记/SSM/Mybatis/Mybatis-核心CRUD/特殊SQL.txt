1、引入：
    由于#{}的实现方式为占位符赋值，会自动加上单引号，而${}实现方式为字符串拼接，不会自动加上单引号
    所以#{}在不需要加单引号的场景具有局限性。
2、模糊查询：
     ●Mapper接口中的声明：
        List<User> getUserByLike(@Param("mohu") String mohu);
     ●映射文件中的声明：
            <select id="getUserByLike" resultType="User">
                “SQL语句”
            </select>
     ●SQL语句的三种填充方式：
        ▶select * from t_user where username like '%${mohu}%'
        ▶select * from t_user where username like concat('%',#{mohu},'%')
        ▶select * from t_user where username like "%"#{mohu}"%"

3、批量删除：
    ●Mapper接口中的声明：
        void deleteMoreUser(@Param("ids") String ids);
    ●映射文件中的声明：
         <delete id="deleteMoreUser">
             delete from t_user where id in(${ids})
         </delete>

4、表名为参数：
    ●Mapper接口中的声明：
        List<User> getUserList(@Param("tableName") String tableName);
    ●映射文件中的声明：
        <select id="getUserList" resultType="User">
            select * from ${tableName}
        </select>

5、获取自增的主键
    ●Mapper接口中的声明：
        void insertUser(User user);
    ●映射文件中的声明：
            ▶useGeneratedKeys:表示当前添加功能使用自增的主键
            ▶keyProperty:将添加的数据的自增主键为实体类类型的参数的属性赋值
        <insert id="insertUser" useGeneratedKeys="true" keyProperty="id">
            insert into t_user values(null,#{username},#{password},#{age},#{gender},#{email})
        </insert>
    ●Java代码的操作方式：
         User user = new User(null,"xiaoming","123456",23,"男","123@qq.com");
         mapper.insertUser(user);//执行完该映射的SQL语句后，user主键被赋值
         System.out.println(user);



