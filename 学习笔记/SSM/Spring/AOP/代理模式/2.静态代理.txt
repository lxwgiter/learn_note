①代码：

    public class CalculatorStaticProxy implements Calculator {

        private CalculatorImpl target;

        public CalculatorStaticProxy(CalculatorImpl target) {
            this.target = target;
        }

        @Override
        public int add(int i, int j) {
            System.out.println("日志，方法：add，参数："+i+","+j);
            int result = target.add(i, j);
            System.out.println("日志，方法：add，结果："+result);
            return result;
        }

        @Override
        public int sub(int i, int j) {
            System.out.println("日志，方法：sub，参数："+i+","+j);
            int result = target.sub(i, j);
            System.out.println("日志，方法：sub，结果："+result);
            return result;
        }

        @Override
        public int mul(int i, int j) {
            System.out.println("日志，方法：mul，参数："+i+","+j);
            int result = target.mul(i, j);
            System.out.println("日志，方法：mul，结果："+result);
            return result;
        }

        @Override
        public int div(int i, int j) {
            System.out.println("日志，方法：div，参数："+i+","+j);
            int result = target.div(i, j);
            System.out.println("日志，方法：div，结果："+result);
            return result;
        }
    }

②局限性：
    静态代理确实实现了解耦，但是由于代码都写死了，完全不具备任何的灵活性。就拿日志功能来说，将来其他地方也需要附加日志，那还得再声明更多个静态代理类，
    那就产生了大量重复的代码，日志功能还是分散的，没有统一管理。
    提出进一步的需求：将日志功能集中到一个代理类中，将来有任何日志需求，都通过这一个代理
    类来实现。这就需要使用动态代理技术了。