①动态代理的分类：
     1、jdk动态代理，要求必须有接口，最终生成的代理类和目标类实现相同的接口在com.sun.proxy包下，类名为$proxy2
     2、cglib动态代理(第三方动态代理)，最终生成的代理类会继承目标类，并且和目标类在相同的包下

②jdk动态代理演示
    public class ProxyFactory {

        /**
         * target即为被代理的对象
         */
        private Object target;

        public ProxyFactory(Object target) {
            this.target = target;
        }
        //getProxy方法返回的是代理对象
        public Object getProxy(){
            ClassLoader classLoader = this.getClass().getClassLoader();
            Class<?>[] interfaces = target.getClass().getInterfaces();
            InvocationHandler h = new InvocationHandler() {
                /**
                 * proxy：代理对象
                 * method：代理对象需要实现的方法，即其中需要重写的方法
                 * args：method所对应方法的参数
                 */
                @Override
                public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
                    Object result = null;
                    try {
                        System.out.println("日志，方法："+method.getName()+"，参数："+ Arrays.toString(args));
                        //proxy表示代理对象，method表示要执行的方法，args表示要执行的方法到的参数列表
                        result = method.invoke(target, args);
                        System.out.println("日志，方法："+method.getName()+"，结果："+ result);
                    } catch (Exception e) {
                        e.printStackTrace();
                        System.out.println("日志，方法："+method.getName()+"，异常："+ e);
                    } finally {
                        System.out.println("日志，方法："+method.getName()+"，方法执行完毕");
                    }
                    return result;
                }
            };
            /**
             * ClassLoader loader：指定加载动态生成的代理类的类加载器，这里使用的是应用类加载器
             * Class[] interfaces：获取目标对象实现的所有接口的class对象的数组
             * InvocationHandler h：设置代理类中的抽象方法如何重写
             */
            return Proxy.newProxyInstance(classLoader, interfaces, h);
        }
    }

③测试：
        @Test
        public void testProxy(){
            ProxyFactory proxyFactory = new ProxyFactory(new CalculatorImpl());
            Calculator proxy = (Calculator) proxyFactory.getProxy();
            proxy.div(1,0);
        }