1、编程式事务：
    事务功能的相关操作全部通过自己编写代码来实现：
        Connection conn = ...;
        try {
            // 开启事务：关闭事务的自动提交
            conn.setAutoCommit(false);
            // 核心操作
            // 提交事务
            conn.commit();
        }catch(Exception e){
            // 回滚事务
            conn.rollBack();
        }finally{
            // 释放数据库连接
            conn.close();
        }
2、编程式的实现方式存在缺陷：
    细节没有被屏蔽：具体操作过程中，所有细节都需要程序员自己来完成，比较繁琐。
    代码复用性不高：如果没有有效抽取出来，每次实现功能都需要自己编写代码，代码就没有得到复用。

3、声明式事务：
    既然事务控制的代码有规律可循，代码的结构基本是确定的，所以框架就可以将固定模式的代码抽取出来，进行相关的封装。
    封装起来后，我们只需要在配置文件中进行简单的配置即可完成操作。
        好处1：提高开发效率
        好处2：消除了冗余的代码
        好处3：框架会综合考虑相关领域中在实际开发环境下有可能遇到的各种问题，进行了健壮性、性能等各个方面的优化
    所以，我们可以总结下面两个概念：
        编程式：自己写代码实现功能
        声明式：通过配置让框架实现功能

4、声明式事务的优点：
    声明式事务式基于IOC和AOP的，利用到了切面去处理事务，且该切面是框架为我们提供的，我们不需要自己实现切面
    只需要在将要被事务管理的方法上加上注解即可。

5、DataSourceTransactionManager(事务管理器)
    框架为我们提供的事务切面的实现类，我们在基于注解或者基于XML的声明式事务中都需要在spring的配置文件中进行配置





















