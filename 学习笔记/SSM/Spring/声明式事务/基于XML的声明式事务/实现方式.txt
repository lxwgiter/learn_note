基于XML的声明式事务并不是重点，以下演示是在基于注解的声明式事务上做修改


1、基于XML的声明式事务必须引入AspectJ依赖：
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-aspects</artifactId>
                <version>5.3.1</version>
            </dependency>

2、去除掉所有的@Transactional注解

3、将Spring配置文件中去掉tx:annotation-driven 标签，并添加配置：
    <aop:config>
            <!-- 配置事务通知和切入点表达式 -->
            <aop:advisor advice-ref="txAdvice" pointcut="execution(*com.lxw.spring.tx.xml.service.impl.*.*(..))"></aop:advisor>
    </aop:config>
    <!-- tx:advice标签：配置事务通知 -->
    <!-- id属性：给事务通知标签设置唯一标识，便于引用 -->
    <!-- transaction-manager属性：关联事务管理器 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
            <tx:attributes>
                <!-- tx:method标签：配置具体的事务方法 -->
                <!-- name属性：指定方法名，可以使用星号代表多个字符 -->
                <tx:method name="get*" read-only="true"/>
                <tx:method name="query*" read-only="true"/>
                <tx:method name="find*" read-only="true"/>

                <!-- read-only属性：设置只读属性 -->
                <!-- rollback-for属性：设置回滚的异常 -->
                <!-- no-rollback-for属性：设置不回滚的异常 -->
                <!-- isolation属性：设置事务的隔离级别 -->
                <!-- timeout属性：设置事务的超时属性 -->
                <!-- propagation属性：设置事务的传播行为 -->
                <tx:method name="save*" read-only="false" rollback-
    for="java.lang.Exception" propagation="REQUIRES_NEW"/>
                <tx:method name="update*" read-only="false" rollback-
    for="java.lang.Exception" propagation="REQUIRES_NEW"/>
                <tx:method name="delete*" read-only="false" rollback-
    for="java.lang.Exception" propagation="REQUIRES_NEW"/>
            </tx:attributes>
    </tx:advice>