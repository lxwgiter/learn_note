1、@Transactional书写的位置：
    @Transactional标识在方法上，咋只会影响该方法
    @Transactional标识的类上，咋会影响类中所有的方法

2、使用@Transactional注解设置事务属性
    事务的五种属性均可使用@Transactional注解进行设置
    ●事务的只读
    ●事务的超时
    ●事务的回滚
    ●事务的隔离级别
    ●事务的传播

3、使用@Transactional设置事务的只读：
    ①作用：
        对一个查询操作来说，如果我们把它设置成只读，就能够明确告诉数据库，这个操作不涉及写操作。这
        样数据库就能够针对查询操作来进行优化。
    ②书写方式：
        @Transactional(readOnly = true)
    ③注意：
        对增删改操作设置只读会抛出下面异常：
        Caused by: java.sql.SQLException: Connection is read-only. Queries leading to data modification are not allowed

3、使用@Transactional设置事务的超时：
    ①作用
        事务在执行过程中，有可能因为遇到某些问题，导致程序卡住，从而长时间占用数据库资源。而长时间占用资源，
        大概率是因为程序运行出现了问题（可能是Java程序或MySQL数据库或网络连接等等）。此时这个很可能出问题的程序应该被回滚，
        撤销它已做的操作，事务结束，把资源让出来，让其他正常程序可以执行。
    ②书写方式：
        @Transactional(timeout = 3)
    ③注意
        若超时，执行过程中抛出异常：
        org.springframework.transaction.TransactionTimedOutException: Transaction timed out:
        deadline was Fri Jun 04 16:25:39 CST 2022

4、使用@Transactional设置事务的回滚：
    ①介绍
        声明式事务默认只针对运行时异常回滚，编译时异常不回滚。
        可以通过@Transactional中相关属性设置回滚策略
            rollbackFor属性：需要设置一个Class类型的对象
            rollbackForClassName属性：需要设置一个字符串类型的全类名
            noRollbackFor属性：需要设置一个Class类型的对象
            rollbackFor属性：需要设置一个字符串类型的全类名
    ②书写方式：
        @Transactional(noRollbackFor = ArithmeticException.class)
        @Transactional(noRollbackForClassName = "java.lang.ArithmeticException")

5、使用@Transactional设置事务的隔离级别：
    ①介绍
        数据库系统必须具有隔离并发运行各个事务的能力，使它们不会相互影响，避免各种并发问题。一个事务与其他事务隔离的程度称为隔离级别。
        SQL标准中规定了多种事务隔离级别，不同隔离级别对应不同的干扰程度，隔离级别越高，数据一致性就越好，但并发性越弱。
        隔离级别一共有四种：
        ●读未提交：READ UNCOMMITTED
            允许Transaction01读取Transaction02未提交的修改。
        ●读已提交：READ COMMITTED、
            要求Transaction01只能读取Transaction02已提交的修改。
        ●可重复读：REPEATABLE READ
            确保Transaction01可以多次从一个字段中读取到相同的值，即Transaction01执行期间禁止其它事务对这个字段进行更新。
        ●串行化：SERIALIZABLE
            确保Transaction01可以多次从一个表中读取到相同的行，在Transaction01执行期间，禁止其它事务对这个表进行添加、更新、删除操作。可以避免任何并发问题，但性能十分低下。

        各个隔离级别解决并发问题的能力见下表：
            隔离级别            脏读          不可重复读           幻读
            READ UNCOMMITTED    有           有                   有
            READ COMMITTED      无           有                   有
            REPEATABLE READ     无           无                   有
            SERIALIZABLE        无           无                   无

    ②使用方式：
        @Transactional(isolation = Isolation.DEFAULT)//使用数据库默认的隔离级别
        @Transactional(isolation = Isolation.READ_UNCOMMITTED)//读未提交
        @Transactional(isolation = Isolation.READ_COMMITTED)//读已提交
        @Transactional(isolation = Isolation.REPEATABLE_READ)//可重复读
        @Transactional(isolation = Isolation.SERIALIZABLE)//串行化

5、使用@Transactional设置事务的传播：
    ①介绍
        当事务方法被另一个事务方法调用时，必须指定事务应该如何传播。例如：方法可能继续在现有事务中
        运行，也可能开启一个新事务，并在自己的事务中运行。
    ②使用方式：
        可以通过@Transactional中的propagation属性设置事务传播行为
        @Transactional(propagation = Propagation.REQUIRED)
    ③什么是事务的传播
        比如方法一设置了声明式事务、方法二调用了方法一的同时，也设置了声明式事务，这时默认使用的时方法二的事务
        若想使用方法一的事务，只需在方法一的注解声明上做修改：@Transactional(propagation = Propagation.REQUIRED)













