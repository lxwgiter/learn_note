1、什么是@ResultMapping注解？
    从注解名称上我们可以看到，@RequestMapping注解的作用就是将请求和处理请求的控制器方法关联起来，建立映射关系。
    SpringMVC 接收到指定的请求，就会来找到在映射关系中对应的控制器方法来处理这个请求。
2、@ResultMapping注解可以标记的位置：
    @RequestMapping标识一个类：设置映射请求的请求路径的初始信息
    @RequestMapping标识一个方法：设置映射请求请求路径的具体信息
3、@ResultMapping注解的四个属性：
    value属性、method属性、params属性、headers属性
    ①value属性：
        ▶value属性通过请求的请求地址匹配请求映射
        ▶value属性是一个字符串类型的数组，表示该请求映射能够匹配多个请求地址所对应的请求(有一个匹配即可)
        ▶value属性必须设置，至少通过请求地址匹配请求映射
        ▶书写格式:
            @RequestMapping(
                value = {"/testRequestMapping", "/test"}
            )

    ②method属性：
        ▶method属性通过请求的请求方式（get或post）匹配请求映射
        ▶method属性是一个RequestMethod类型的数组，表示该请求映射能够匹配多种请求方式的请求(有一个匹配即可)
        ▶若当前请求的请求地址满足请求映射的value属性，但是请求方式不满足method属性，则浏览器报错:
            405：Request method 'POST' not supported
        ▶书写方式:
            @RequestMapping(
                    value = {"/testRequestMapping", "/test"},
                    method = {RequestMethod.GET, RequestMethod.POST}
            )
        ▶注：
            ●对于处理指定请求方式的控制器方法，SpringMVC中提供了@RequestMapping的派生注解
                ▶处理get请求的映射-->@GetMapping
                ▶处理post请求的映射-->@PostMapping
                ▶处理put请求的映射-->@PutMapping
                ▶处理delete请求的映射-->@DeleteMapping
            ●常用的请求方式有get，post，put，delete
                ▶但是目前浏览器只支持get和post，若在form表单提交时，为method设置了其他请求方式的字符串（put或delete），则按照默认的请求方式get处理
                ▶若要发送put和delete请求，则需要通过spring提供的过滤器HiddenHttpMethodFilter，在RESTful部分会讲到

    ③params属性：
        ●params属性通过请求的请求参数匹配请求映射
        ●params属性是一个字符串类型的数组，可以通过四种表达式设置请求参数和请求映射的匹配关系(必须全部匹配)
            ▶"param"：要求请求映射所匹配的请求必须携带param请求参数
            ▶"!param"：要求请求映射所匹配的请求必须不能携带param请求参数
            ▶"param=value"：要求请求映射所匹配的请求必须携带param请求参数且param=value
            ▶"param!=value"：要求请求映射所匹配的请求要么不携带param请求参数、要么携带但param!=value
        ●书写格式：
            @RequestMapping(
                value = {"/testRequestMapping", "/test"}
                ,method = {RequestMethod.GET, RequestMethod.POST}
                ,params = {"username","password!=123456"}
            )
        ●注：
            若当前请求满足@RequestMapping注解的value和method属性，但是不满足params属性，此时
            页面回报错400：Parameter conditions "username, password!=123456" not met for actual
            request parameters: username={admin}, password={123456}


    ④headers属性：
        ●headers属性通过请求的请求头信息匹配请求映射
        ●headers属性是一个字符串类型的数组，可以通过四种表达式设置请求头信息和请求映射的匹配关系(必须全部匹配)
            ▶"header"：要求请求映射所匹配的请求必须携带header请求头信息
            ▶"!header"：要求请求映射所匹配的请求必须不能携带header请求头信息
            ▶"header=value"：要求请求映射所匹配的请求必须携带header请求头信息且header=value
            ▶"header!=value"：要求请求映射所匹配的请求要么不携带header、要么携带但header!=value
        ●若当前请求满足@RequestMapping注解的value和method属性，但是不满足headers属性，此时页面显示404错误，即资源未找到

















